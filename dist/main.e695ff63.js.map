{"mappings":"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","sources":["node_modules/@swc/helpers/src/_define_property.mjs","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","src/render/vector/exceptions.ts","src/render/vector/vec2Math.ts","src/render/vector/math.ts","src/render/vector/vec2.ts","src/render/items/item.js","src/render/items/circle.js","src/render/vector/vec2Line.ts","src/render/objects/types.ts","src/render/objects/collisionModels.js","src/render/objects/object.ts","src/render/objects/ball.ts","src/render/constrains/constrain.js","src/render/constrains/viewport.js","src/render/constrains/circle.js","src/render/objectsGenerator.js","src/render/mappedObjectsGenerator.js","src/render/totalObjectsGenerator.js","src/render/grid.ts","src/render/solver.ts","src/render/items/rect.js","src/render/renderableObjects/object.js","src/render/objects/immovableBall.ts","src/render/renderableObjects/immovableLine.js","src/render/objects/immovableLine.ts","src/render/items/line.js","src/render/items/circleWithText.js","src/render/items/frame.js","src/render/index.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-6f291a3aa9d014ec.js","src/host/worker.ts","src/worker/main.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","export class Vec2Exception extends Error {}\n\nexport class Vec2ExceptionParallel extends Vec2Exception {}\nexport class Vec2ExceptionNoPerpendicularVectorToZeroVector extends Vec2Exception {}","import { Vec2 } from \"./vec2\";\nimport { Vec2ExceptionParallel } from \"./exceptions\";\nimport { Vec2Line } from \"./vec2Line\";\n\nexport class Vec2Math {\n    static diff(vec1: Vec2, vec2: Vec2): Vec2 {\n        return new Vec2(vec1.x - vec2.x, vec1.y - vec2.y);\n    }\n\n    static mul(vec1: Vec2, scalar: number): Vec2 {\n        return new Vec2(vec1.x * scalar, vec1.y * scalar);\n    }\n\n    /**\n     * Calculates distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length;\n    }\n\n    /**\n     * Calculates square of distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance2(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length2;\n    }\n\n    /**\n     * Finds intersection between 2 lines\n     * @param {Vec2Line} line1\n     * @param {Vec2Line} line2\n     * @returns {Vec2}\n     */\n    static intersect(line1, line2) {\n        if (line1.K === line2.K) {\n            throw new Vec2ExceptionParallel()\n        }\n\n        if (isNaN(line1.K) || isNaN(line2.K)) {\n            // One of two lines is vertical\n            if (isNaN(line1.K)) {\n                return line2.makeVec2FromX(line1._vec1.x);\n            } else {\n                return line1.makeVec2FromX(line2._vec1.x);\n            }\n        } else {\n            const x = (line1.B - line2.B) / (line2.K - line1.K);\n            return line1.makeVec2FromX(x);\n        }\n    }\n\n    /**\n     * Dot product of 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static dot(vec1: Vec2, vec2: Vec2): number {\n        return vec1.x * vec2.x + vec1.y * vec2.y;\n    }\n\n    /**\n     *\n     * @param {Vec2} vec\n     * @param {Vec2Line} line\n     * @returns {Vec2}\n     */\n    static mirror(vec: Vec2, line: Vec2Line) {\n        const normal = line.direction.perpendicular;\n        return vec.diff(\n            normal.mul(2 * Vec2Math.dot(vec, normal))\n        );\n    }\n\n    static scale(vec1: Vec2, vec2: Vec2) {\n        return new Vec2(\n            vec1.x / vec2.x,\n            vec1.y / vec2.y\n        )\n    }\n}\n","export const MATH_ERROR = 0.000001;\nexport const MATH_ERROR2 = MATH_ERROR * MATH_ERROR;\nexport const SQRT2 = Math.sqrt(2);\n\n/**\n * Checks if a equals b with given error\n * @param {number} a\n * @param {number} b\n * @param {number} error\n * @returns {boolean}\n */\nexport function isEqual(a, b, error) {\n    return Math.abs(a - b) < error;\n}\n\nexport type NullableNumber = number | null;\n","import { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR2, NullableNumber } from \"./math\";\nimport { Vec2ExceptionNoPerpendicularVectorToZeroVector } from \"./exceptions\";\n\nexport class Vec2 {\n    private _x: number = 0;\n    private _y: number = 0;\n    private _length: NullableNumber = null;\n    private _length2: NullableNumber = null;\n\n    static lengthCallsCount = 0;\n    static length2CallsCount = 0;\n\n    constructor(x: number, y: number, l?: number) {\n        this._x = x;\n        this._y = y;\n\n        if (l) {\n            this._length = l;\n            this._length2 = l * l;\n        }\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set x(x: number) {\n        this._x = x;\n        this._length = null;\n    }\n\n    set y(y:number) {\n        this._y = y;\n        this._length = null;\n    }\n\n    get length(): number {\n        if (this._length === null) {\n            this._length = Math.sqrt(this.x*this.x + this.y*this.y);\n            Vec2.lengthCallsCount++;\n        }\n\n        return this._length;\n    }\n\n    /**\n     * Returns length^2\n     */\n    get length2(): number {\n        if (this._length2 === null) {\n            this._length2 = this._x*this._x + this._y*this._y;\n            Vec2.length2CallsCount++;\n        }\n\n        return this._length2;\n    }\n\n    /**\n     * Adds vec2 to current vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    addSelf(vec2: Vec2): Vec2 {\n        this._x += vec2.x;\n        this._y += vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Subtract from current vector given vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    subSelf(vec2: Vec2): Vec2 {\n        this._x -= vec2.x;\n        this._y -= vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Flips along X axis\n     * @returns {Vec2}\n     */\n    flipYSelf(): Vec2 {\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Flips along Y axis\n     * @returns {Vec2}\n     */\n    flipXSelf(): Vec2 {\n        this._x = -this._x;\n        return this;\n    }\n\n    flipSelf(): Vec2 {\n        this._x = -this._x;\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Checks if this vector equals given vector using global MATH_ERROR const\n     * @param vec2\n     */\n    equals(vec2) {\n        return Vec2Math.distance2(this, vec2) < MATH_ERROR2;\n    }\n\n    /**\n     * Sums current vector and given vector and returns new vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    sum(vec2: Vec2): Vec2 {\n        return new Vec2(this.x + vec2.x, this.y + vec2.y);\n    }\n\n    /**\n     * Calculate difference between current vector and given vector and returns\n     * new vector\n     *\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    diff(vec2: Vec2) {\n        return new Vec2(this.x - vec2.x, this.y - vec2.y);\n    }\n\n    /**\n     * Multiplicates vector by number\n     * @param {number} value\n     * @returns {Vec2}\n     */\n    mul(value: number) {\n        return new Vec2(this.x * value, this.y * value);\n    }\n\n    copy() {\n        return new Vec2(this.x, this.y);\n    }\n\n    applySelf(callback): Vec2 {\n        this.x = callback(this.x);\n        this.y = callback(this.y);\n        return this;\n    }\n\n    /**\n     * Returns normalized vector\n     * @returns {Vec2}\n     */\n    get ort() {\n        const l = this.length;\n        return new Vec2(this.x / l, this.y / l, 1);\n    }\n\n    get perpendicular() {\n        if (this.x === 0) {\n            // Vertical\n            if (this.y > 0) {\n                return Vec2.Horizontal().ort\n            } else if (this.y < 0) {\n                return Vec2.Horizontal().ort.flipSelf();\n            } else {\n                throw new Vec2ExceptionNoPerpendicularVectorToZeroVector();\n            }\n        } else if (this.y === 0) {\n            // Horizontal\n            if (this.x > 0) {\n                return Vec2.Vertical().ort\n            } else if (this.x < 0) {\n                return Vec2.Vertical().ort.flipSelf();\n            }\n        }\n\n        return new Vec2(\n            -this.y / this.x,\n            1\n        ).ort;\n    }\n\n    static Zero() {\n        return new Vec2(0, 0);\n    }\n\n    static Horizontal() {\n        return new Vec2(1, 0);\n    }\n\n    static Vertical() {\n        return new Vec2(0, 1);\n    }\n\n    static Down(y) {\n        return new Vec2(0, y);\n    }\n\n    static Right(x) {\n        return new Vec2(x, 0);\n    }\n}\n\n\n\n\n\n\n\n\n","import {Vec2} from \"../vector/vec2\";\n\nexport class Item {\n    position = Vec2.Zero();\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    constructor(context, position) {\n        this.context = context;\n        this.position = position;\n    }\n\n    /**\n     * Method immediately renders object on context\n     */\n    render() {\n\n    }\n\n    /**\n     * Method tries to put object in render block\n     */\n    queue() {\n\n    }\n}","import {Item} from \"./item\";\n\nexport class Circle extends Item {\n    r = 0;\n    color = '#00ff00';\n\n    constructor(context, position, r, color) {\n        super(context, position);\n\n        if (r) {\n            this.r = r;\n        }\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.beginPath()\n        this.context.arc(\n            this.position.x,\n            this.position.y,\n            this.r,\n            0,\n            2 * Math.PI\n        )\n\n        this.context.fillStyle = this.color;\n        this.context.fill();\n    }\n}","import { Vec2 } from \"./vec2\";\nimport { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR, isEqual } from \"./math\";\n\nexport class Vec2Line {\n    private _vec1: Vec2 = Vec2.Zero();\n    private _vec2: Vec2 = Vec2.Zero();\n\n    private _direction: Vec2;\n    private _ort: Vec2;\n\n    private _length: number;\n    private _length2: number;\n\n    /**\n     * Y = K*X + B\n     * @type {number}\n     */\n    private _k: number = 0;\n    private _b: number = 0;\n\n    constructor(vec1, vec2) {\n        this._vec1 = vec1;\n        this._vec2 = vec2;\n\n        this._direction = Vec2Math.diff(this._vec1, this._vec2);\n        this._length = this._direction.length;\n        this._length2 = this._direction.length2;\n        this._ort = this._direction.ort;\n\n        this.calculateKB();\n    }\n\n    /**\n     * Determines if given point lays on the line\n     * @param vec\n     * @returns {boolean}\n     */\n    inBetween(vec) {\n        const l1 = Vec2Math.diff(vec, this._vec1).length;\n        const l2 = Vec2Math.diff(this._vec2, vec).length;\n        const sum = l1 + l2;\n\n\n\n\n        return isEqual(this._length, sum, MATH_ERROR);\n    }\n\n    calculateKB() {\n        if (this._vec1.y === this._vec2.y) {\n            // Horizontal line\n            this._b = this._vec1.y;\n            this._k = 0;\n        } else if (this._vec1.x === this._vec2.x) {\n            // Vertical line\n            this._b = NaN;\n            this._k = NaN;\n        } else {\n            this._b = (this._vec1.x * this._vec2.y - this._vec1.y * this._vec2.x) / (this._vec1.x - this._vec2.x)\n            this._k = (this._vec1.y - this._vec2.y) / (this._vec1.x - this._vec2.x);\n        }\n    }\n\n    makeVec2FromX(x) {\n        return new Vec2(x, this._k * x + this._b);\n    }\n\n    copy() {\n        return new Vec2Line(\n            this._vec1,\n            this._vec2\n        )\n    }\n\n    moveBy(vec) {\n        this._vec1.addSelf(vec);\n        this._vec2.addSelf(vec);\n        this.calculateKB();\n    }\n\n    getPointProjection(vec) {\n        const a = this.direction;\n        const b = Vec2Math.diff(vec, this._vec1);\n        const cosabD = Vec2Math.dot(a, b) / (this.length);\n\n        return this._vec1.sum(\n            this.ort.mul(cosabD)\n        );\n    }\n\n    get B() {\n        return this._b;\n    }\n\n    get K() {\n        return this._k;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    get ort() {\n        return this._ort;\n    }\n\n    get vec1() {\n        return this._vec1;\n    }\n\n    get vec2() {\n        return this._vec2;\n    }\n\n    static Vertical(x) {\n        return new Vec2Line(\n            new Vec2(x, 0),\n            new Vec2(x, Number.MAX_SAFE_INTEGER)\n        )\n    }\n\n    static Horizontal(y) {\n        return new Vec2Line(\n            new Vec2(0, y),\n            new Vec2(Number.MAX_SAFE_INTEGER, y)\n        )\n    }\n}","export enum SolverObjectTypes {\n    TypeNull = 0,\n    TypeBall = 1,\n    TypeImmovableBall = 2,\n    TypeImmovableLine = 3\n}\n","import {Vec2Math} from \"../vector/vec2Math\";\nimport {BallsObject} from \"./ball\";\nimport {SolverObjectTypes, TYPE_BALL, TYPE_IMMOVABLE_BALL, TYPE_IMMOVABLE_LINE} from \"./types\";\n\n/**\n * Collision between 2 balls objects\n * @param {BallsObject} obj1\n * @param {BallsObject} obj2\n */\nexport function collideBallAndBall(obj1, obj2) {\n    const between = Vec2Math.diff(obj1.currentPosition, obj2.currentPosition);\n    const distance = between.length;\n    const requiredDistance = obj1.radius + obj2.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        obj1.currentPosition.addSelf(Vec2Math.mul(normalized, obj1.radius / requiredDistance * delta * obj1.bounceValue));\n        obj2.currentPosition.subSelf(Vec2Math.mul(normalized, obj2.radius / requiredDistance * delta * obj2.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable ball\n * @param {BallsObject} ball\n * @param {ImmovableBallsObject} immovable\n */\nexport function collideBallAndImmovableBall(ball, immovable) {\n    const between = Vec2Math.diff(\n        ball.currentPosition,\n        immovable.currentPosition\n    );\n\n    const distance = between.length;\n    const requiredDistance = ball.radius + immovable.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        ball.currentPosition.addSelf(Vec2Math.mul(normalized, ball.radius / requiredDistance * delta * ball.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable line\n * @param {BallsObject} ball\n * @param {ImmovableLineObject} line\n */\nexport function collideBallAndImmovableLine(ball, line) {\n    try {\n        const projectionPoint = line._line.getPointProjection(ball.currentPosition);\n\n        if (line._line.inBetween(projectionPoint)) {\n            const between = Vec2Math.diff(\n                projectionPoint,\n                ball.currentPosition\n            )\n\n            if (between.length < ball.radius) {\n                const normalized = between.ort;\n\n                const delta = ball.radius - between.length;\n\n                ball.currentPosition.subSelf(\n                    Vec2Math.mul(normalized, delta * ball.bounceValue)\n                )\n            }\n        }\n    } catch (e) {\n    }\n}\n\nfunction flipObjects(obj1, obj2) {\n    return {\n        a: obj2,\n        b: obj1\n    }\n}\n\nexport function collide(a, b) {\n    let obj1 = a;\n    let obj2 = b;\n    if (obj1.type > obj2.type) {\n        const flipped = flipObjects(obj1, obj2);\n        obj1 = flipped.a;\n        obj2 = flipped.b\n    }\n\n    switch (true) {\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeBall:\n            return collideBallAndBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableBall:\n            return collideBallAndImmovableBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableLine:\n            return collideBallAndImmovableLine(obj1, obj2);\n        default:\n            return;\n    }\n}","import {SolverObjectTypes} from \"./types\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport abstract class BaseSolverObject {\n    readonly type: SolverObjectTypes = SolverObjectTypes.TypeNull;\n    readonly index: number;\n    readonly immovable: boolean;\n\n    previousPosition = Vec2.Zero();\n    currentPosition = Vec2.Zero();\n\n    constructor() {\n        this.index = BaseSolverObject.index++;\n    }\n\n    update(step) {\n\n    }\n\n    accelerate(acc) {\n\n    }\n\n    collide(obj) {\n\n    }\n\n    addToGrid(collisionGrid) {\n\n    }\n\n    abstract moveBy(delta: Vec2);\n\n    abstract isPointInsideObject(point: Vec2): boolean;\n\n    static index = 0;\n}\n","import { Vec2 } from \"../vector/vec2\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport { Vec2Math } from \"../vector/vec2Math\";\nimport {SolverObjectTypes} from \"./types\";\nimport { collide } from \"./collisionModels\";\nimport {BaseSolverObject} from \"./object\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class BallsObject extends BaseSolverObject {\n    acc = Vec2.Zero();\n\n    radius = 10;\n    bounceValue = 1.1;\n\n    type = SolverObjectTypes.TypeBall;\n    immovable = false;\n\n    /**\n     * Creates balls object\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super();\n        this.previousPosition = position.copy();\n        this.currentPosition = position.copy();\n        if (radius !== undefined) {\n            this.radius = radius\n        }\n    }\n\n    /**\n     * Updates state of object\n     * @param {number} step\n     */\n    update(step) {\n        const velocity = this.velocity;\n        this.previousPosition = this.currentPosition.copy();\n        this.currentPosition.addSelf(\n            velocity.addSelf(\n                this.acc.mul(step * step)\n            )\n        )\n        this.acc = Vec2.Zero();\n    }\n\n    accelerate(acc) {\n        this.acc.addSelf(acc);\n        return this;\n    }\n\n    setVelocity(vel) {\n        this.velocity = vel;\n        return this;\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    collide(obj) {\n        collide(this, obj)\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObject(\n            Math.floor(this.currentPosition.x),\n            Math.floor(this.currentPosition.y),\n            this\n        )\n    }\n\n    moveBy(delta: Vec2) {\n        this.currentPosition.addSelf(delta);\n    }\n\n    isPointInsideObject(point: Vec2): boolean {\n        return Vec2Math.distance(this.currentPosition, point) < this.radius;\n    }\n\n    get velocity() {\n        return Vec2Math.diff(\n            this.currentPosition,\n            this.previousPosition\n        );\n    }\n\n    set velocity(v) {\n        this.previousPosition = Vec2Math.diff(this.currentPosition,v);\n    }\n\n    /**\n     *\n     * @returns {Vec2Line}\n     */\n    get movementVector() {\n        return new Vec2Line(this.previousPosition, this.currentPosition);\n    }\n}","export class Constrain {\n    constructor() {\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    applyConstrain(obj) {\n\n    }\n}","import { Constrain } from \"./constrain\";\n\nexport class ViewportConstrain extends Constrain {\n    _width = 0;\n    _height = 0;\n\n    constructor(width, height) {\n        super()\n        this.width = width;\n        this.height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    set width(width) {\n        this._width = width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set height(height) {\n        this._height = height;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        if (obj.currentPosition.x - obj.radius < 0) {\n            obj.currentPosition.x = obj.radius;\n        }\n\n        if (obj.currentPosition.x + obj.radius > this._width) {\n            obj.currentPosition.x = this._width - obj.radius;\n        }\n\n        if (obj.currentPosition.y - obj.radius < 0) {\n            obj.currentPosition.y = obj.radius;\n        }\n\n        if (obj.currentPosition.y + obj.radius > this._height) {\n            obj.currentPosition.y = this._height - obj.radius;\n        }\n    }\n}","import {Constrain} from \"./constrain\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class CircleConstrain extends Constrain {\n    /**\n     *\n     * @type {Vec2}\n     */\n    center = Vec2.Zero();\n\n    radius = 0;\n\n    constructor(center, radius) {\n        super();\n\n        this.center = center;\n        this.radius = radius;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        const toCenter = obj.currentPosition.diff(this.center);\n        const distance = toCenter.length;\n        const r = obj.radius;\n\n        if (distance > (this.radius - r)) {\n            const n = toCenter.ort;\n            obj.currentPosition = this.center.sum(\n                n.mul(this.radius - r)\n            );\n        }\n    }\n\n}","export class ObjectsGenerator {\n    solver = null;\n    constructor(solver) {\n        this.solver = solver;\n    }\n\n    // TODO Make me iterator\n    getNextObject(step) {\n        return [];\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\n\nexport class MappedObjectGeneratorItem {\n    /**\n     * Delay before object appear\n     * @type {number}\n     */\n    timeout;\n\n    /**\n     * Object configuration\n     * @type {BallsObject}\n     */\n    object;\n\n    constructor(timeout, object) {\n        this.timeout = timeout;\n        this.object = object;\n    }\n\n}\n\nexport class MappedObjectsGenerator extends ObjectsGenerator {\n    /**\n     * @param {MappedObjectGeneratorItem[]} map\n     */\n    constructor(solver, map) {\n        super(solver);\n\n        this.items = map;\n        this.currentTime = 0;\n    }\n\n    getNextObject(step) {\n        this.currentTime += step;\n\n        console.log(this.currentTime)\n\n        const index = this.items.findIndex((item) => item.timeout < this.currentTime);\n        if (index > -1) {\n            return [this.items.splice(index, 1)[0].object];\n        }\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\nexport class TotalObjectsGenerator extends ObjectsGenerator {\n    constructor(solver, count, delay, createCallback) {\n        super(solver);\n        this.limit = count;\n        this.total = 0;\n\n        this.delay = delay;\n        this.create = createCallback;\n        this.lastCreateTime = 0;\n    }\n\n    getNextObject(step) {\n        if (this.total > this.limit) {\n            return [];\n        }\n\n        this.lastCreateTime += 1;\n        if (this.lastCreateTime > this.delay) {\n            const newItems = this.create(this.total);\n            this.lastCreateTime = 0;\n            this.total+= newItems.length;\n\n            return newItems;\n        }\n    }\n}","import { Vec2 } from \"./vector/vec2\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Vec2Math} from \"./vector/vec2Math\";\n\nexport class CollisionCell {\n    objects: BaseSolverObject[] = [];\n    highlight: boolean = false;\n\n    static MAX_OBJECT_IN_CELL = 10;\n\n    addObject(obj) {\n        if (this.objects.length >= CollisionCell.MAX_OBJECT_IN_CELL) {\n            return\n        }\n\n        this.objects.push(obj);\n    }\n\n    clear() {\n        this.objects = [];\n        this.highlight = false;\n    }\n\n    remove(index) {\n        const objectIndex = this.objects.findIndex(obj => obj.index === index);\n        if (objectIndex !== -1) {\n            this.objects.splice(objectIndex, 1);\n        }\n    }\n\n    get count() {\n        return this.objects.length;\n    }\n}\n\ntype CollisionGridForEachCallback = (column: number, row: number, cell: CollisionCell, index?: number) => void;\n\nexport class CollisionGrid {\n    cells: CollisionCell[] = [];\n    _width: number;\n    _height: number;\n    _size: number;\n    cellSize: Vec2;\n\n    constructor(width, height, cellSize: Vec2) {\n        this._width = width;\n        this._height = height;\n\n        this.cellSize = cellSize;\n\n        this.resize();\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    set width(w: number) {\n        this._width = w;\n        this.resize();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    set height(h: number) {\n        this._height = h;\n        this.resize();\n    }\n\n    resize() {\n        this.cells = [];\n        this._size = this._width * this._height;\n        for (let i = 0; i < this._size; i++) {\n            this.cells.push(new CollisionCell());\n        }\n    }\n\n    addObject(worldX, worldY, obj) {\n        const x = Math.floor(worldX / this.cellSize.x);\n        const y = Math.floor(worldY / this.cellSize.y);\n\n        const index = x * this._height + y;\n        this.addObjectByIndex(index, obj);\n    }\n\n    addObjectByIndex(index, obj) {\n        if (!isNaN(index) && index>=0 && index<this.size) {\n            this.cells[index].addObject(obj);\n        }\n    }\n\n    makeIndexFromVec(vec) {\n        return vec.x * this._height + vec.y;\n    }\n\n    makeIndexFromCoord(x, y) {\n        return x * this._height + y;\n    }\n\n    makeVecFromIndex(index): Vec2 {\n        const x = Math.floor(index / this._height);\n        const y = index - x * this._height;\n        return new Vec2(x, y);\n    }\n\n    /**\n     * Adds object to all cells between given coords\n     * @param worldLeftTop\n     * @param worldRightBottom\n     * @param obj\n     */\n    addObjectToCells(worldLeftTop: Vec2, worldRightBottom: Vec2, obj: BaseSolverObject) {\n        const point1 = Vec2Math.scale(worldLeftTop, this.cellSize).applySelf(Math.floor);\n        const point2 = Vec2Math.scale(worldRightBottom, this.cellSize).applySelf(Math.floor);\n\n        const index1 = this.makeIndexFromVec(point1);\n        const index2 = this.makeIndexFromVec(point2);\n\n        if (point1.x === point2.x) {\n            // Vertical\n            for (let cellIndex = index1; cellIndex < index2; cellIndex++) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else if (point1.y === point2.y) {\n            // Horizontal\n            for (let cellIndex = index1; cellIndex < index2; cellIndex+=this.height) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else {\n            let left = Math.min(point1.x, point2.x);\n            let top = Math.min(point1.y, point2.y);\n            let right = Math.max(point1.x, point2.x);\n            let bottom = Math.max(point1.y, point2.y);\n            let height = bottom - top;\n            let startFrom = this.makeIndexFromCoord(left, top);\n\n            for (let x = 0; x <= right-left; x++) {\n                for (let y = 0; y <= height; y++) {\n                    const cellIndex= startFrom + x * this.height + y;\n                    this.addObjectByIndex(cellIndex, obj);\n                }\n            }\n        }\n    }\n\n    clear() {\n        for (let i = 0; i < this.size; i++) {\n            this.cells[i].clear();\n        }\n    }\n\n    forEach(callback: CollisionGridForEachCallback) {\n        this.cells.forEach((cell, index) => {\n            const pos = this.makeVecFromIndex(index);\n            callback(pos.x, pos.y, cell, index);\n        })\n    }\n\n    hasCell(index, dt) {\n        if (index < 0 || index >= this.size) {\n            return false;\n        }\n\n        const pos = this.makeVecFromIndex(index);\n\n        const x = pos.x;\n        const y = pos.y;\n\n        if (y <= 0 && dt < 0) {\n            // TOP CELL\n            return false;\n        }\n\n        if (y === this.height - 1 && dt > 0) {\n            // Bottom cell\n            return  false;\n        }\n\n        if (x === 0 && dt < 0) {\n            // left cell\n            return false;\n        }\n\n        if (x >= this.width - 1 && dt > 0) {\n            // right cell;\n            return false;\n        }\n\n        return true;\n    }\n}\n","import {Vec2} from \"./vector/vec2\";\nimport {BallsObject} from \"./objects/ball\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Constrain} from \"./constrains/constrain\";\nimport {CollisionCell, CollisionGrid} from \"./grid\";\n\nexport class Solver {\n    objects: BaseSolverObject[] = []\n    constrains: Constrain = null;\n    gravity: Vec2 = Vec2.Zero();\n    subSteps: number = 4;\n    useFixedTime: boolean = true;\n    step: number;\n    collisionGrid: CollisionGrid;\n    worldSize: Vec2;\n\n    cellSize: Vec2;\n\n    constructor(worldSize) {\n        this.objects = [];\n        this.worldSize = worldSize.copy();\n\n        this.configure();\n    }\n\n    configure() {\n        this.gravity = new Vec2(0, 100);\n\n        this.useFixedTime = true;\n        this.step = 0.017 / this.subSteps;\n\n        const cellSize = 16;\n\n        const gridX = Math.round(this.worldSize.x / cellSize);\n        const gridY = Math.round(this.worldSize.y / cellSize);\n\n        this.cellSize = new Vec2(\n            this.worldSize.x / gridX,\n            this.worldSize.y / gridY\n        );\n\n        this.collisionGrid = new CollisionGrid(\n            gridX, gridY,\n            this.cellSize\n        )\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n    }\n\n    /**\n     * Update the simulation by given step.\n     * @param {number} time amount of seconds passed since last update.\n     */\n    update(time) {\n        const subTime = this.useFixedTime ? this.step : time / this.subSteps;\n        for (let i = 0; i < this.subSteps; i++) {\n            this.addObjectsToGrid();\n            this.processCollisions();\n            this.applyGravity();\n            this.updateObjects(subTime);\n            this.applyConstrains();\n        }\n    }\n\n    addObjectsToGrid() {\n        this.collisionGrid.clear();\n        this.objects.forEach((obj, index) => {\n            obj.addToGrid(this.collisionGrid);\n        });\n    }\n\n    /**\n     * Update objects state\n     * @param {number} time amount of seconds passed since last update\n     */\n    updateObjects(time) {\n        this.objects.forEach(obj => obj.update(time))\n    }\n\n    applyGravity() {\n        this.objects.forEach(obj => obj.accelerate(this.gravity))\n    }\n\n    applyConstrains() {\n        this.objects.forEach(obj => this.constrains.applyConstrain(obj))\n    }\n\n    processCollisionsInCell(objA: BaseSolverObject, cell: CollisionCell) {\n        cell.objects.forEach(objB => {\n            if (objA === objB) {\n                return;\n            }\n\n            if (objA.immovable && objB.immovable) {\n                return;\n            }\n\n            objA.collide(objB);\n        })\n    }\n\n    processCell(index: number) {\n        this.collisionGrid.cells[index].objects.forEach(objA => {\n            this.processCollisionsInCell(objA, this.collisionGrid.cells[index]); // SELF\n\n            if (this.collisionGrid.hasCell(index, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - 1]); // TOP\n            }\n\n            if (this.collisionGrid.hasCell(index, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + 1]); // BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height - 1]); // RIGHT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height]); // RIGHT\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height + 1]); // RIGHT BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height - 1]); // LEFT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height]); // LEFT\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height + 1]); // LEFT BOTTOM\n            }\n        })\n    }\n\n    processCollisions() {\n        for (let index = 0; index < this.collisionGrid.size; index++) {\n            this.processCell(index);\n        }\n    }\n}\n\nfunction makeKey(obj1, obj2) {\n    return [obj1.index, obj2.index].sort().join('-');\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Rect extends Item {\n    size = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, size, color) {\n        super(context, position);\n\n        this.size = size;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(\n            this.position.x,\n            this.position.y,\n            this.position.x + this.size.x,\n            this.position.y + this.size.y\n        )\n    }\n}","export class RenderableObject {\n    /**\n     * @type {BallsObject}\n     */\n    ballsObject = null;\n\n    /**\n     * @type {Item}\n     */\n    renderItem = null;\n\n    constructor(ballsObject, renderItem) {\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        this.renderItem.position = this.ballsObject.currentPosition;\n    }\n\n    render() {\n        this.update();\n        this.renderItem.render();\n    }\n}","import {BallsObject} from \"./ball\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\nimport {SQRT2} from \"../vector/math\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class ImmovableBallsObject extends BallsObject {\n    type = SolverObjectTypes.TypeImmovableBall;\n    immovable = true;\n    bounceValue = 0.5;\n\n    /**\n     * @type {Vec2}\n     * @private\n     */\n    _fixedPosition = null;\n\n    /**\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super(position, radius);\n        this._fixedPosition = position.copy();\n    }\n\n    update(step) {\n        this.currentPosition = this._fixedPosition;\n        this.previousPosition = this._fixedPosition;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        const vec = new Vec2(\n            this.radius * SQRT2,\n            this.radius * SQRT2\n        )\n\n        const leftTop = this.currentPosition.sum(vec);\n        const rightBottom = this.currentPosition.diff(vec);\n\n        collisionGrid.addObjectToCells(\n            leftTop,\n            rightBottom,\n            this\n        );\n    }\n}","import {RenderableObject} from \"./object\";\n\nexport class ImmovableLineRenderableObject extends RenderableObject {\n    /**\n     * @type {ImmovableLineObject}\n     */\n    ballsObject = null;\n\n    constructor(ballsObject, renderItem) {\n        super(ballsObject);\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        super.update();\n        this.renderItem.direction = this.ballsObject._direction;\n    }\n}","import { BallsObject } from \"./ball\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class ImmovableLineObject extends BallsObject {\n    _direction;\n    _line;\n\n    type = SolverObjectTypes.TypeImmovableLine;\n    immovable = true;\n\n    constructor(position, direction) {\n        super(position, 0);\n        this._direction = direction;\n\n        this._line = new Vec2Line(\n            this.currentPosition.copy(),\n            this.currentPosition.copy().sum(this._direction)\n        )\n    }\n\n    update(step) {\n        this.currentPosition = this._line._vec1;\n        this.previousPosition = this._line._vec2;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObjectToCells(\n            this._line._vec1,\n            this._line._vec2,\n            this\n        );\n    }\n\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Line extends Item {\n    direction = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, direction, color) {\n        super(context, position);\n\n        this.direction = direction;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.beginPath(); // Start a new path\n        this.context.moveTo(this.position.x, this.position.y);\n        this.context.lineTo(\n            this.position.x + this.direction.x,\n            this.position.y + this.direction.y\n        );\n        this.context.stroke(); // Render the path\n    }\n}","import {Circle} from \"./circle\";\n\nexport class CircleWithText extends Circle {\n    text = '';\n    textColor = '#ffffff';\n\n    constructor(context, position,r, color, text, textColor) {\n        super(context, position, r, color);\n        this.text = text;\n        if (textColor) {\n            this.textColor = textColor;\n        }\n    }\n\n    render() {\n        super.render();\n        this.context.fillStyle = this.textColor;\n        this.context.textBaseline = \"middle\";\n        this.context.textAlign = \"center\";\n        this.context.fillText(this.text, this.position.x, this.position.y);\n    }\n}","import {Rect} from \"./rect\";\n\nexport class Frame extends Rect {\n    constructor(context, position, size, color) {\n        super(context, position, size, color);\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.strokeRect(\n            this.position.x,\n            this.position.y,\n            this.size.x,\n            this.size.y\n        )\n    }\n\n    queue() {\n\n    }\n}","import {Circle} from \"./items/circle\";\nimport {Vec2} from \"./vector/vec2\";\nimport {Vec2Math} from \"./vector/vec2Math\";\nimport {BallsObject} from \"./objects/ball\";\nimport {ViewportConstrain} from \"./constrains/viewport\";\nimport {CircleConstrain} from \"./constrains/circle\";\nimport {MappedObjectGeneratorItem, MappedObjectsGenerator} from \"./mappedObjectsGenerator\";\nimport {TotalObjectsGenerator} from \"./totalObjectsGenerator\";\nimport {Solver} from \"./solver\";\nimport {Rect} from \"./items/rect\";\nimport {RenderableObject} from \"./renderableObjects/object\";\nimport {ImmovableBallsObject} from \"./objects/immovableBall\";\nimport {ImmovableLineRenderableObject} from \"./renderableObjects/immovableLine\";\nimport {ImmovableLineObject} from \"./objects/immovableLine\";\nimport {Line} from \"./items/line\";\nimport {CircleWithText} from \"./items/circleWithText\";\nimport {Frame} from \"./items/frame\";\n\nconst balls = [\n    new MappedObjectGeneratorItem(\n        1,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        2,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        3,\n        new BallsObject(new Vec2(10, 10))\n    ),\n]\n\nconst milkShakePoints = [\n    new Vec2(0, 0),\n    new Vec2(70, 380),\n    new Vec2(270, 380),\n    new Vec2(340, 0)\n]\n\nconst milkShakeLines = [\n    [milkShakePoints[0], Vec2Math.diff(milkShakePoints[0], milkShakePoints[1]).flipSelf()],\n    [milkShakePoints[1], Vec2Math.diff(milkShakePoints[1], milkShakePoints[2]).flipSelf()],\n    [milkShakePoints[2], Vec2Math.diff(milkShakePoints[2], milkShakePoints[3]).flipSelf()]\n]\n\nconst ballsColors = {\n    57: '#ffffff',\n    78: '#ffffff',\n    71: '#ffffff',\n    86: '#ffffff',\n    200: '#ffffff',\n    202: '#ffffff',\n    218: '#ffffff',\n}\n\nfunction index2color(index) {\n    const frequency=5/1000;\n    const r = Math.floor(Math.sin(frequency*index + 0) * (127) + 128);\n    const g = Math.floor(Math.sin(frequency*index + 2) * (127) + 128);\n    const b = Math.floor(Math.sin(frequency*index + 4) * (127) + 128);\n    return `rgba(${r}, ${g}, ${b}, 1)`;\n}\n\nexport class Render {\n    /**\n     * List of balls\n     * @type {RenderableObject[]}\n     */\n    objects = []\n\n    /**\n     * @type {Constrain}\n     */\n    constrains = null;\n\n    /**\n     * Solver for physics\n     * @type {Solver}\n     */\n    solver = null;\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.context = this.canvas.getContext(\"2d\");\n\n        this.timeRenderStart = performance.now();\n        this.timeRenderEnd = performance.now();\n        this.step = 0;\n\n        /**\n         * @type {RenderableObject[]}\n         */\n        this.objects = [];\n\n        this.items = [];\n\n        this.generator = null;\n        this.solver = null\n\n        this.redBall = null;\n\n        this.configure();\n    }\n\n    configure() {\n        this.solver = new Solver(\n            new Vec2(\n                this.canvas.width,\n                this.canvas.height\n            )\n        );\n\n        this.context.font = '10px serif';\n\n        //this.switchToCircleConstrain();\n        this.switchToViewportConstrain();\n        this.solver.constrains = this.constrains;\n\n        const canvasCenter = new Vec2(\n            this.canvas.width / 2,\n            this.canvas.height / 2\n        );\n\n        const ballGeneratorPoint = canvasCenter.diff(\n            new Vec2(\n                300,\n                300\n            )\n        )\n        const ballVelocity = new Vec2(\n            2, -2\n        ).mul(1/this.solver.subSteps);\n\n        this.generator = new TotalObjectsGenerator(\n            this.solver,\n            1000,\n            7,\n            (index) => {\n                const obj = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint,\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index+200),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                const obj2 = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint.sum(\n                            Vec2.Down(20)\n                        ),\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index+100),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                const obj3 = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint.sum(\n                            Vec2.Down(-20)\n                        ),\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                return [obj,obj2, obj3];\n            }\n        );\n\n        this.redBall = new RenderableObject(\n            new ImmovableBallsObject(new Vec2(230, 50), 30),\n            new Circle(this.context, Vec2.Zero(), 30, '#ff0000')\n        );\n\n        this.addObject(this.redBall);\n\n        milkShakeLines.forEach(line => {\n            this.addObject(new ImmovableLineRenderableObject(\n                new ImmovableLineObject(\n                    line[0].sum(\n                        canvasCenter.diff(new Vec2(340/2, 380/2))\n                    ),\n                    line[1]\n                ),\n                new Line(\n                    this.context,\n                    Vec2.Zero(),\n                    Vec2.Zero(),\n                    '#ffffff'\n                )\n            ));\n        });\n    }\n\n    processUserInput(event) {\n        if (event.leftButtonDown) {\n            if (this.redBall.ballsObject.isPointInsideObject(\n                new Vec2(\n                    event.screenX,\n                    event.screenY\n                )\n            )) {\n                this.canMoveRedObject = true;\n            }\n\n            if (this.canMoveRedObject) {\n                this.redBall.ballsObject.moveBy(\n                    new Vec2(\n                        event.dx,\n                        event.dy\n                    )\n                )\n            }\n        } else {\n            this.canMoveRedObject = false;\n        }\n    }\n\n    /**\n     * @param {RenderableObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n        this.solver.addObject(obj.ballsObject);\n    }\n\n    update(time) {\n        this.solver.update(time);\n    }\n\n    generatorsTick(time) {\n        const newBalls = this.generator.getNextObject(time);\n        if (newBalls) {\n            newBalls.forEach(ball => this.addObject(ball));\n        }\n    }\n\n    tick() {\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.generatorsTick(this.step / 1000);\n        this.update(this.step / 1000);\n\n        this.clear();\n        this.renderItems();\n        //this.renderGrid();\n\n        this.printFPS();\n\n        Vec2.lengthCallsCount = 0;\n    }\n\n    nextFrame = (time) => {\n        this.step = time - this.timeRenderEnd;\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = time;\n        self.requestAnimationFrame(this.nextFrame);\n    }\n\n    nextInterval = () => {\n        this.timeRenderStart = performance.now()\n        this.step = this.timeRenderStart - this.timeRenderEnd;\n\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = performance.now();\n    }\n\n    renderItems() {\n        this.items.forEach(item => item.render());\n        this.objects.forEach(obj => obj.render());\n    }\n\n    printText(text, x, y) {\n        this.context.fillStyle = \"#ffffff\";\n        this.context.textAlign = \"start\";\n        this.context.fillText(text, x, y);\n    }\n\n    printFPS() {\n        this.context.fillStyle = 'rgba(0,0,0,0.1)';\n        this.context.fillRect(0, 0, 100, 60);\n        this.printText(`${Math.round(this.step)} ms / ${Math.round(1000/this.step)} FPS`, 0, 10);\n        this.printText(`Length calls: ${Vec2.lengthCallsCount}`, 0 , 20);\n        this.printText(`Lenght2 calls: ${Vec2.length2CallsCount}`, 0 , 30);\n        this.printText(`Objects: ${this.objects.length}`, 0, 40);\n        this.printText(`Compares per object: ${Math.round(Vec2.lengthCallsCount / this.objects.length)}`, 0, 50);\n    }\n\n    clear() {\n        this.context.fillStyle = \"rgba(0, 0, 0, 0.9)\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    }\n\n    start() {\n        if (self.requestAnimationFrame) {\n            self.requestAnimationFrame(this.nextFrame);\n        } else {\n            setInterval(this.nextInterval, 16)\n        }\n    }\n\n    renderGrid() {\n        this.solver.collisionGrid.forEach((column, row, cell, index) => {\n            const cellPosition = new Vec2(\n                column * this.solver.cellSize.x,\n                row * this.solver.cellSize.y,\n            );\n            const rect = new Frame(\n                this.context,\n                cellPosition,\n                this.solver.cellSize.diff(new Vec2(5, 5)),\n                cell.count > 0 ? '#ff0000' : '#00ff00'\n            )\n\n            if (cell.highlight) {\n                this.context.lineWidth = 10;\n            }\n\n            rect.render();\n\n            this.context.lineWidth = 1;\n            this.printText(\n                index,\n                cellPosition.x + this.solver.cellSize.x / 2,\n                cellPosition.y + this.solver.cellSize.y / 2\n            )\n        })\n    }\n\n    switchToCircleConstrain() {\n        this.constrains = new CircleConstrain(\n            new Vec2(this.canvas.width / 2, this.canvas.height / 2),\n            this.canvas.height / 2\n        )\n\n        this.items.push(\n            new Circle(\n                this.context,\n                this.canvas.width / 2,\n                this.canvas.height / 2,\n                this.canvas.height / 2,\n                '#000000'\n            )\n        );\n    }\n\n    switchToViewportConstrain() {\n        this.constrains = new ViewportConstrain(this.canvas.width, this.canvas.height)\n        // this.items.push(\n        //     new Rect(\n        //         this.context,\n        //         Vec2.Zero(),\n        //         new Vec2(\n        //             this.canvas.width,\n        //             this.canvas.height\n        //         ),\n        //         '#000000'\n        //     )\n        // );\n    }\n}","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet bundleURL = require('./helpers/bundle-url');\nlet url = bundleURL.getBundleURL('bG1Fz') + require('./helpers/bundle-manifest').resolve(\"bG1Fz\");module.exports = workerURL(url, bundleURL.getOrigin(url), false);","import {UserInput, UIEvent} from \"./input\";\nimport {createWorker} from \"./workerWorkaround.js\";\n\nexport enum MessageType {\n    MessageNone = 0,\n    MessageInit = 1,\n    MessageUserInput = 2\n}\n\nexport class MessageEvent {\n    type = MessageType.MessageNone;\n}\n\nexport class MessageInit extends MessageEvent {\n    type = MessageType.MessageInit;\n    canvas;\n\n    constructor(canvas) {\n        super();\n        this.canvas = canvas;\n    }\n}\n\nexport class MessageUserInput extends MessageEvent {\n    type = MessageType.MessageUserInput;\n    event;\n\n    constructor(event) {\n        super();\n        this.event = event;\n    }\n}\n\nexport class WorkerApplication {\n    worker;\n    userInput;\n\n    constructor(canvas) {\n        this.worker = createWorker();\n        const offscreen = canvas.transferControlToOffscreen();\n\n        this.worker.postMessage(\n            new MessageInit(offscreen),\n            [offscreen]\n        );\n\n        this.userInput = new UserInput(canvas);\n        this.userInput.addHandler(this.sendUserInputEvent);\n    }\n\n    sendUserInputEvent = (event: UIEvent) => {\n        this.worker.postMessage(\n            new MessageUserInput(event)\n        )\n    }\n\n    initUserInput() {\n\n    }\n}","import { Render } from \"../render/index.js\";\nimport {MessageType} from \"../host/worker\";\n\nlet render;\n\nonmessage = function (event ) {\n    switch (event.data.type) {\n        case MessageType.MessageInit:\n            render = new Render(event.data.canvas);\n            render.start();\n            break;\n        case MessageType.MessageUserInput:\n            if (render) {\n                render.processUserInput(event.data.event);\n            }\n            break;\n    }\n}"],"names":["$455213ab5977fa62$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$2619cd9603f24923$export$f7ad0328861e2f03","$2619cd9603f24923$var$mapping","id","resolved","Error","$34c4ac1087279ada$export$79992de41895b472","$34c4ac1087279ada$export$98e05f023e6bbbeb","$34c4ac1087279ada$export$cc5bbfba1d12de75","$da092f9d35cbb202$export$92b0492af2e4b152","static","vec1","vec2","$23259477c7d45e0f$export$ac4bca90992eed1","x","y","scalar","diff","length","length2","line1","line2","K","isNaN","makeVec2FromX","_vec1","B","vec","line","normal","direction","perpendicular","mul","dot","$04ffb51222183417$export$9201df218db36553","$04ffb51222183417$export$3681641e15b6e2c3","Math","sqrt","this","_x","_y","_length","lengthCallsCount","_length2","length2CallsCount","addSelf","subSelf","flipYSelf","flipXSelf","flipSelf","equals","distance2","sum","copy","applySelf","callback","ort","l","Horizontal","Vertical","constructor","$4617e5f5b8d500e2$export$6d08773d2e66f8f2","render","queue","context","position","Zero","$143ee38cf3bec427$export$c89a927ffc67e6fa","beginPath","arc","r","PI","fillStyle","color","fill","super","$342285373965c949$export$769818a274da100a","inBetween","_vec2","a","b","error","abs","calculateKB","_b","_k","NaN","moveBy","getPointProjection","cosabD","_direction","_ort","Number","MAX_SAFE_INTEGER","$0da903fdcff320eb$export$a59432db1b5f15cd","SolverObjectTypes","$93a740b8e1cfed7d$export$98e6d07575f46913","obj1","obj2","type","flipped","$93a740b8e1cfed7d$var$flipObjects","TypeBall","between","currentPosition","distance","requiredDistance","radius","normalized","delta","bounceValue","$93a740b8e1cfed7d$export$23e74c69ee7b6dae","TypeImmovableBall","ball","immovable","$93a740b8e1cfed7d$export$6d6f4258faab0992","TypeImmovableLine","projectionPoint","_line","e","$93a740b8e1cfed7d$export$4d790f09e0e06cd9","$854c4cc80086d7fa$export$8387ea1f2c3d2dbf","update","step","accelerate","acc","collide","addToGrid","collisionGrid","TypeNull","index","$fe689d312a788027$export$e4134913c977dac4","velocity","previousPosition","setVelocity","vel","addObject","floor","isPointInsideObject","point","v","movementVector","undefined","$b152758d9af9f18b$export$504c072c1a75a697","applyConstrain","$e5deb4c997d86649$export$29fb847bec292dd0","width","_width","height","_height","$0cde6a08871d2110$export$4384cf344d141b50","toCenter","center","n","$f03645509a0a5725$export$780b62e628ec518f","getNextObject","solver","$057f5faed6298d51$export$cf86583e2e1a386b","timeout","object","$4e27416e632cb8f4$export$a16316d22a718d27","total","limit","lastCreateTime","delay","newItems","create","count","createCallback","$5e32aa21e4921f20$export$e172ac46f8971d96","objects","MAX_OBJECT_IN_CELL","push","clear","highlight","remove","objectIndex","findIndex","splice","$5e32aa21e4921f20$export$82d945040ef2d6e1","size","_size","w","resize","h","cells","i","worldX","worldY","cellSize","addObjectByIndex","makeIndexFromVec","makeIndexFromCoord","makeVecFromIndex","addObjectToCells","worldLeftTop","worldRightBottom","point1","scale","point2","index1","index2","cellIndex","left","min","top","right","max","startFrom","forEach","cell","pos","hasCell","dt","$1f664dd11ce9c2a3$export$cca492cadf45c096","configure","gravity","useFixedTime","subSteps","gridX","round","worldSize","gridY","time","subTime","addObjectsToGrid","processCollisions","applyGravity","updateObjects","applyConstrains","constrains","processCollisionsInCell","objA","objB","processCell","$2c1a4895804b6108$export$c79fc6492f3af13d","fillRect","$e0645bb325b1483a$export$c682e94218fd2425","renderItem","ballsObject","$a9095e88da856a7b$export$231acc6c5e36d927","_fixedPosition","leftTop","rightBottom","$dc60d3072d13f390$export$d17c9f1e24f0afb0","$b0a63751632cf09f$export$35284351ee95db01","$4a6bc97734791e07$export$17d680238e50603e","strokeStyle","moveTo","lineTo","stroke","$01802125d5e03a9c$export$d56a2681f508d897","textColor","textBaseline","textAlign","fillText","text","$7c30461bbbff0ab9$export$b89a827e9254211a","strokeRect","$9f255293c67779ce$var$milkShakePoints","$9f255293c67779ce$var$milkShakeLines","$9f255293c67779ce$var$index2color","frequency","sin","$9f255293c67779ce$export$160ae30d75f98247","canvas","font","switchToViewportConstrain","canvasCenter","ballGeneratorPoint","ballVelocity","generator","Down","redBall","processUserInput","event","leftButtonDown","screenX","screenY","canMoveRedObject","dx","dy","generatorsTick","newBalls","tick","renderItems","printFPS","items","item","printText","start","self","requestAnimationFrame","nextFrame","setInterval","nextInterval","renderGrid","column","row","cellPosition","rect","lineWidth","switchToCircleConstrain","timeRenderEnd","timeRenderStart","performance","now","getContext","$757eccde35510a46$export$bdfd709ae4826697","$757eccde35510a46$export$5a759dc7a1cfb72a","$bd03ac34b4cf7f5e$exports","workerUrl","origin","isESM","location","source","JSON","stringify","URL","createObjectURL","Blob","$757eccde35510a46$var$bundleURL","$757eccde35510a46$var$getBaseURL","url","replace","err","matches","stack","match","$757eccde35510a46$var$getBundleURL","$57a40255727eec54$export$80edbf15fa61a4db","$7ea06c4bd46da2ef$var$url","parcelRequire","resolve","MessageType","$69faa2370f43cace$var$render","onmessage","data","MessageInit","MessageUserInput"],"version":3,"file":"main.e695ff63.js.map"}