{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-17f7e6129ea686bf.js","src/utils/onReady.js","src/utils/getElement.js","src/host/input.ts","src/host/messages.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-a7dd5e3a60c32e38.js","src/host/worker.ts","src/host/workerWorkaround.js","node_modules/@swc/helpers/src/_define_property.mjs","src/render/vector/exceptions.ts","src/render/vector/vec2Math.ts","src/render/vector/math.ts","src/render/vector/vec2.ts","src/render/items/item.js","src/render/items/circle.js","src/render/vector/vec2Line.ts","src/render/objects/types.ts","src/render/objects/collisionModels.js","src/render/objects/object.ts","src/render/objects/ball.ts","src/render/constrains/constrain.js","src/render/constrains/viewport.js","src/render/constrains/circle.js","src/render/objectsGenerator.js","src/render/mappedObjectsGenerator.js","src/render/totalObjectsGenerator.js","src/render/grid.ts","src/render/solver.ts","src/render/items/rect.js","src/render/renderableObjects/object.js","src/render/objects/immovableBall.ts","src/render/renderableObjects/immovableLine.js","src/render/objects/immovableLine.ts","src/render/items/line.js","src/render/items/circleWithText.js","src/render/items/frame.js","src/render/index.js","src/host/direct.ts","src/host/main.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"GHvDZ\\\":\\\"index.f1cba274.js\\\",\\\"bG1Fz\\\":\\\"main.6f291b2b.js\\\"}\"));","const DOCUMENT_STATE_LOADING = \"loading\";\n\n/**\n * Calls function when webpage is ready\n * @param {function} callback\n */\nexport function onReady(callback) {\n    if (document.readyState !== DOCUMENT_STATE_LOADING) {\n        callback();\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    }\n}\n","export class ElementNotFound extends Error {}\n\nexport function getElement(selector) {\n    const element = document.querySelector(selector);\n    if (!element) {\n        throw new ElementNotFound(selector);\n    }\n\n    return element;\n}","export interface UIEvent {}\n\nexport interface UIMouseEvent {\n    screenX: number,\n    screenY: number,\n    dx: number,\n    dy: number,\n    leftButtonDown: boolean\n}\n\nexport type UserInputHandler = (event: UIEvent) => void;\n\nexport class UserInput {\n    _canvas: HTMLCanvasElement;\n    _handlers: Set<UserInputHandler>;\n\n    _oldX: number;\n    _oldY: number;\n\n    _leftButtonDown: boolean;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this._canvas = canvas;\n        this._handlers = new Set();\n\n        this._leftButtonDown = false;\n\n        this.addHandlers();\n    }\n\n    private addHandlers() {\n        this._canvas.addEventListener('mouseenter', this.mouseEnter);\n        this._canvas.addEventListener('mouseleave', this.mouseLeave);\n        this._canvas.addEventListener('mousemove', this.mouseMove);\n        this._canvas.addEventListener('mousedown', this.mouseDown);\n        this._canvas.addEventListener('mouseup', this.mouseUp);\n        this._canvas.addEventListener('click', this.click);\n    }\n\n    private removeHandlers() {\n\n    }\n\n    private processEvent(event) {\n        this._handlers.forEach((callback: UserInputHandler) => {\n            callback(event);\n        })\n    }\n\n    addHandler(callback: UserInputHandler) {\n        this._handlers.add(callback);\n    }\n\n    removeHandler(callback: UserInputHandler) {\n        if (this._handlers.has(callback)) {\n            this._handlers.delete(callback);\n        }\n    }\n\n    createMouseEvent(browserEvent: MouseEvent): UIMouseEvent {\n        return {\n            screenX: browserEvent.offsetX,\n            screenY: browserEvent.offsetY,\n            dx: -this._oldX + browserEvent.offsetX,\n            dy: -this._oldY + browserEvent.offsetY,\n            leftButtonDown: this._leftButtonDown\n        }\n    }\n\n    mouseEnter = (browserEvent: MouseEvent) => {\n        const event = this.createMouseEvent(browserEvent);\n        this.processEvent(event);\n\n        this._oldX = event.screenX;\n        this._oldY = event.screenY;\n    }\n\n    mouseLeave = (browserEvent: MouseEvent) => {\n        const event = this.createMouseEvent(browserEvent);\n        this.processEvent(event);\n\n        this._oldX = event.screenX;\n        this._oldY = event.screenY;\n    }\n\n    mouseMove = (browserEvent: MouseEvent) => {\n        const event = this.createMouseEvent(browserEvent);\n        this.processEvent(event);\n\n        this._oldX = event.screenX;\n        this._oldY = event.screenY;\n    }\n\n    mouseDown = (browserEvent: MouseEvent) => {\n        this._leftButtonDown = true;\n\n        const event = this.createMouseEvent(browserEvent);\n        this.processEvent(event);\n\n        this._oldX = event.screenX;\n        this._oldY = event.screenY;\n    }\n\n    mouseUp = (browserEvent: MouseEvent) => {\n        this._leftButtonDown = false;\n\n        const event = this.createMouseEvent(browserEvent);\n        this.processEvent(event);\n\n        this._oldX = event.screenX;\n        this._oldY = event.screenY;\n    }\n\n    click = (browserEvent: MouseEvent) => {\n        const event = this.createMouseEvent(browserEvent);\n        this.processEvent(event);\n\n        this._oldX = event.screenX;\n        this._oldY = event.screenY;\n    }\n}","export enum MessageType {\n    MessageNone = 0,\n    MessageInit = 1,\n    MessageUserInput = 2\n}\n\nexport class MessageEvent {\n    type = MessageType.MessageNone;\n}\n\nexport class MessageInit extends MessageEvent {\n    type = MessageType.MessageInit;\n    canvas;\n\n    constructor(canvas) {\n        super();\n        this.canvas = canvas;\n    }\n}\n\nexport class MessageUserInput extends MessageEvent {\n    type = MessageType.MessageUserInput;\n    event;\n\n    constructor(event) {\n        super();\n        this.event = event;\n    }\n}\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"bG1Fz\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);","import {UserInput, UIEvent} from \"./input\";\nimport {MessageUserInput, MessageInit} from \"./messages\";\nimport {createWorker} from \"./workerWorkaround.js\";\n\nexport class WorkerApplication {\n    worker;\n    userInput;\n\n    constructor(canvas) {\n        this.worker = createWorker();\n        const offscreen = canvas.transferControlToOffscreen();\n\n        this.worker.postMessage(\n            new MessageInit(offscreen),\n            [offscreen]\n        );\n\n        this.userInput = new UserInput(canvas);\n        this.userInput.addHandler(this.sendUserInputEvent);\n    }\n\n    sendUserInputEvent = (event: UIEvent) => {\n        this.worker.postMessage(\n            new MessageUserInput(event)\n        )\n    }\n\n    initUserInput() {\n\n    }\n}","export function createWorker() {\n    return new Worker(new URL('../worker/main.ts', import.meta.url), {type: 'module'});\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export class Vec2Exception extends Error {}\n\nexport class Vec2ExceptionParallel extends Vec2Exception {}\nexport class Vec2ExceptionNoPerpendicularVectorToZeroVector extends Vec2Exception {}","import { Vec2 } from \"./vec2\";\nimport { Vec2ExceptionParallel } from \"./exceptions\";\nimport { Vec2Line } from \"./vec2Line\";\n\nexport class Vec2Math {\n    static diff(vec1: Vec2, vec2: Vec2): Vec2 {\n        return new Vec2(vec1.x - vec2.x, vec1.y - vec2.y);\n    }\n\n    static mul(vec1: Vec2, scalar: number): Vec2 {\n        return new Vec2(vec1.x * scalar, vec1.y * scalar);\n    }\n\n    /**\n     * Calculates distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length;\n    }\n\n    /**\n     * Calculates square of distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance2(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length2;\n    }\n\n    /**\n     * Finds intersection between 2 lines\n     * @param {Vec2Line} line1\n     * @param {Vec2Line} line2\n     * @returns {Vec2}\n     */\n    static intersect(line1, line2) {\n        if (line1.K === line2.K) {\n            throw new Vec2ExceptionParallel()\n        }\n\n        if (isNaN(line1.K) || isNaN(line2.K)) {\n            // One of two lines is vertical\n            if (isNaN(line1.K)) {\n                return line2.makeVec2FromX(line1._vec1.x);\n            } else {\n                return line1.makeVec2FromX(line2._vec1.x);\n            }\n        } else {\n            const x = (line1.B - line2.B) / (line2.K - line1.K);\n            return line1.makeVec2FromX(x);\n        }\n    }\n\n    /**\n     * Dot product of 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static dot(vec1: Vec2, vec2: Vec2): number {\n        return vec1.x * vec2.x + vec1.y * vec2.y;\n    }\n\n    /**\n     *\n     * @param {Vec2} vec\n     * @param {Vec2Line} line\n     * @returns {Vec2}\n     */\n    static mirror(vec: Vec2, line: Vec2Line) {\n        const normal = line.direction.perpendicular;\n        return vec.diff(\n            normal.mul(2 * Vec2Math.dot(vec, normal))\n        );\n    }\n\n    static scale(vec1: Vec2, vec2: Vec2) {\n        return new Vec2(\n            vec1.x / vec2.x,\n            vec1.y / vec2.y\n        )\n    }\n}\n","export const MATH_ERROR = 0.000001;\nexport const MATH_ERROR2 = MATH_ERROR * MATH_ERROR;\nexport const SQRT2 = Math.sqrt(2);\n\n/**\n * Checks if a equals b with given error\n * @param {number} a\n * @param {number} b\n * @param {number} error\n * @returns {boolean}\n */\nexport function isEqual(a, b, error) {\n    return Math.abs(a - b) < error;\n}\n\nexport type NullableNumber = number | null;\n","import { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR2, NullableNumber } from \"./math\";\nimport { Vec2ExceptionNoPerpendicularVectorToZeroVector } from \"./exceptions\";\n\nexport class Vec2 {\n    private _x: number = 0;\n    private _y: number = 0;\n    private _length: NullableNumber = null;\n    private _length2: NullableNumber = null;\n\n    static lengthCallsCount = 0;\n    static length2CallsCount = 0;\n\n    constructor(x: number, y: number, l?: number) {\n        this._x = x;\n        this._y = y;\n\n        if (l) {\n            this._length = l;\n            this._length2 = l * l;\n        }\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set x(x: number) {\n        this._x = x;\n        this._length = null;\n    }\n\n    set y(y:number) {\n        this._y = y;\n        this._length = null;\n    }\n\n    get length(): number {\n        if (this._length === null) {\n            this._length = Math.sqrt(this.x*this.x + this.y*this.y);\n            Vec2.lengthCallsCount++;\n        }\n\n        return this._length;\n    }\n\n    /**\n     * Returns length^2\n     */\n    get length2(): number {\n        if (this._length2 === null) {\n            this._length2 = this._x*this._x + this._y*this._y;\n            Vec2.length2CallsCount++;\n        }\n\n        return this._length2;\n    }\n\n    /**\n     * Adds vec2 to current vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    addSelf(vec2: Vec2): Vec2 {\n        this._x += vec2.x;\n        this._y += vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Subtract from current vector given vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    subSelf(vec2: Vec2): Vec2 {\n        this._x -= vec2.x;\n        this._y -= vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Flips along X axis\n     * @returns {Vec2}\n     */\n    flipYSelf(): Vec2 {\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Flips along Y axis\n     * @returns {Vec2}\n     */\n    flipXSelf(): Vec2 {\n        this._x = -this._x;\n        return this;\n    }\n\n    flipSelf(): Vec2 {\n        this._x = -this._x;\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Checks if this vector equals given vector using global MATH_ERROR const\n     * @param vec2\n     */\n    equals(vec2) {\n        return Vec2Math.distance2(this, vec2) < MATH_ERROR2;\n    }\n\n    /**\n     * Sums current vector and given vector and returns new vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    sum(vec2: Vec2): Vec2 {\n        return new Vec2(this.x + vec2.x, this.y + vec2.y);\n    }\n\n    /**\n     * Calculate difference between current vector and given vector and returns\n     * new vector\n     *\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    diff(vec2: Vec2) {\n        return new Vec2(this.x - vec2.x, this.y - vec2.y);\n    }\n\n    /**\n     * Multiplicates vector by number\n     * @param {number} value\n     * @returns {Vec2}\n     */\n    mul(value: number) {\n        return new Vec2(this.x * value, this.y * value);\n    }\n\n    copy() {\n        return new Vec2(this.x, this.y);\n    }\n\n    applySelf(callback): Vec2 {\n        this.x = callback(this.x);\n        this.y = callback(this.y);\n        return this;\n    }\n\n    /**\n     * Returns normalized vector\n     * @returns {Vec2}\n     */\n    get ort() {\n        const l = this.length;\n        return new Vec2(this.x / l, this.y / l, 1);\n    }\n\n    get perpendicular() {\n        if (this.x === 0) {\n            // Vertical\n            if (this.y > 0) {\n                return Vec2.Horizontal().ort\n            } else if (this.y < 0) {\n                return Vec2.Horizontal().ort.flipSelf();\n            } else {\n                throw new Vec2ExceptionNoPerpendicularVectorToZeroVector();\n            }\n        } else if (this.y === 0) {\n            // Horizontal\n            if (this.x > 0) {\n                return Vec2.Vertical().ort\n            } else if (this.x < 0) {\n                return Vec2.Vertical().ort.flipSelf();\n            }\n        }\n\n        return new Vec2(\n            -this.y / this.x,\n            1\n        ).ort;\n    }\n\n    static Zero() {\n        return new Vec2(0, 0);\n    }\n\n    static Horizontal() {\n        return new Vec2(1, 0);\n    }\n\n    static Vertical() {\n        return new Vec2(0, 1);\n    }\n\n    static Down(y) {\n        return new Vec2(0, y);\n    }\n\n    static Right(x) {\n        return new Vec2(x, 0);\n    }\n}\n\n\n\n\n\n\n\n\n","import {Vec2} from \"../vector/vec2\";\n\nexport class Item {\n    position = Vec2.Zero();\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    constructor(context, position) {\n        this.context = context;\n        this.position = position;\n    }\n\n    /**\n     * Method immediately renders object on context\n     */\n    render() {\n\n    }\n\n    /**\n     * Method tries to put object in render block\n     */\n    queue() {\n\n    }\n}","import {Item} from \"./item\";\n\nexport class Circle extends Item {\n    r = 0;\n    color = '#00ff00';\n\n    constructor(context, position, r, color) {\n        super(context, position);\n\n        if (r) {\n            this.r = r;\n        }\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.beginPath()\n        this.context.arc(\n            this.position.x,\n            this.position.y,\n            this.r,\n            0,\n            2 * Math.PI\n        )\n\n        this.context.fillStyle = this.color;\n        this.context.fill();\n    }\n}","import { Vec2 } from \"./vec2\";\nimport { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR, isEqual } from \"./math\";\n\nexport class Vec2Line {\n    private _vec1: Vec2 = Vec2.Zero();\n    private _vec2: Vec2 = Vec2.Zero();\n\n    private _direction: Vec2;\n    private _ort: Vec2;\n\n    private _length: number;\n    private _length2: number;\n\n    /**\n     * Y = K*X + B\n     * @type {number}\n     */\n    private _k: number = 0;\n    private _b: number = 0;\n\n    constructor(vec1, vec2) {\n        this._vec1 = vec1;\n        this._vec2 = vec2;\n\n        this._direction = Vec2Math.diff(this._vec1, this._vec2);\n        this._length = this._direction.length;\n        this._length2 = this._direction.length2;\n        this._ort = this._direction.ort;\n\n        this.calculateKB();\n    }\n\n    /**\n     * Determines if given point lays on the line\n     * @param vec\n     * @returns {boolean}\n     */\n    inBetween(vec) {\n        const l1 = Vec2Math.diff(vec, this._vec1).length;\n        const l2 = Vec2Math.diff(this._vec2, vec).length;\n        const sum = l1 + l2;\n\n\n\n\n\n        return isEqual(this._length, sum, MATH_ERROR);\n    }\n\n    calculateKB() {\n        if (this._vec1.y === this._vec2.y) {\n            // Horizontal line\n            this._b = this._vec1.y;\n            this._k = 0;\n        } else if (this._vec1.x === this._vec2.x) {\n            // Vertical line\n            this._b = NaN;\n            this._k = NaN;\n        } else {\n            this._b = (this._vec1.x * this._vec2.y - this._vec1.y * this._vec2.x) / (this._vec1.x - this._vec2.x)\n            this._k = (this._vec1.y - this._vec2.y) / (this._vec1.x - this._vec2.x);\n        }\n    }\n\n    makeVec2FromX(x) {\n        return new Vec2(x, this._k * x + this._b);\n    }\n\n    copy() {\n        return new Vec2Line(\n            this._vec1,\n            this._vec2\n        )\n    }\n\n    moveBy(vec) {\n        this._vec1.addSelf(vec);\n        this._vec2.addSelf(vec);\n        this.calculateKB();\n    }\n\n    getPointProjection(vec) {\n        const a = this.direction;\n        const b = Vec2Math.diff(vec, this._vec1);\n        const cosabD = Vec2Math.dot(a, b) / (this.length);\n\n        return this._vec1.sum(\n            this.ort.mul(cosabD)\n        );\n    }\n\n    get B() {\n        return this._b;\n    }\n\n    get K() {\n        return this._k;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    get ort() {\n        return this._ort;\n    }\n\n    get vec1() {\n        return this._vec1;\n    }\n\n    get vec2() {\n        return this._vec2;\n    }\n\n    static Vertical(x) {\n        return new Vec2Line(\n            new Vec2(x, 0),\n            new Vec2(x, Number.MAX_SAFE_INTEGER)\n        )\n    }\n\n    static Horizontal(y) {\n        return new Vec2Line(\n            new Vec2(0, y),\n            new Vec2(Number.MAX_SAFE_INTEGER, y)\n        )\n    }\n}","export enum SolverObjectTypes {\n    TypeNull = 0,\n    TypeBall = 1,\n    TypeImmovableBall = 2,\n    TypeImmovableLine = 3\n}\n","import {Vec2Math} from \"../vector/vec2Math\";\nimport {BallsObject} from \"./ball\";\nimport {SolverObjectTypes, TYPE_BALL, TYPE_IMMOVABLE_BALL, TYPE_IMMOVABLE_LINE} from \"./types\";\n\n/**\n * Collision between 2 balls objects\n * @param {BallsObject} obj1\n * @param {BallsObject} obj2\n */\nexport function collideBallAndBall(obj1, obj2) {\n    const between = Vec2Math.diff(obj1.currentPosition, obj2.currentPosition);\n    const distance = between.length;\n    const requiredDistance = obj1.radius + obj2.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        obj1.currentPosition.addSelf(Vec2Math.mul(normalized, obj1.radius / requiredDistance * delta * obj1.bounceValue));\n        obj2.currentPosition.subSelf(Vec2Math.mul(normalized, obj2.radius / requiredDistance * delta * obj2.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable ball\n * @param {BallsObject} ball\n * @param {ImmovableBallsObject} immovable\n */\nexport function collideBallAndImmovableBall(ball, immovable) {\n    const between = Vec2Math.diff(\n        ball.currentPosition,\n        immovable.currentPosition\n    );\n\n    const distance = between.length;\n    const requiredDistance = ball.radius + immovable.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        ball.currentPosition.addSelf(Vec2Math.mul(normalized, ball.radius / requiredDistance * delta * ball.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable line\n * @param {BallsObject} ball\n * @param {ImmovableLineObject} line\n */\nexport function collideBallAndImmovableLine(ball, line) {\n    try {\n        const projectionPoint = line._line.getPointProjection(ball.currentPosition);\n\n        if (line._line.inBetween(projectionPoint)) {\n            const between = Vec2Math.diff(\n                projectionPoint,\n                ball.currentPosition\n            )\n\n            if (between.length < ball.radius) {\n                const normalized = between.ort;\n\n                const delta = ball.radius - between.length;\n\n                ball.currentPosition.subSelf(\n                    Vec2Math.mul(normalized, delta * ball.bounceValue)\n                )\n            }\n        }\n    } catch (e) {\n    }\n}\n\nfunction flipObjects(obj1, obj2) {\n    return {\n        a: obj2,\n        b: obj1\n    }\n}\n\nexport function collide(a, b) {\n    let obj1 = a;\n    let obj2 = b;\n    if (obj1.type > obj2.type) {\n        const flipped = flipObjects(obj1, obj2);\n        obj1 = flipped.a;\n        obj2 = flipped.b\n    }\n\n    switch (true) {\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeBall:\n            return collideBallAndBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableBall:\n            return collideBallAndImmovableBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableLine:\n            return collideBallAndImmovableLine(obj1, obj2);\n        default:\n            return;\n    }\n}","import {SolverObjectTypes} from \"./types\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport abstract class BaseSolverObject {\n    readonly type: SolverObjectTypes = SolverObjectTypes.TypeNull;\n    readonly index: number;\n    readonly immovable: boolean;\n\n    previousPosition = Vec2.Zero();\n    currentPosition = Vec2.Zero();\n\n    constructor() {\n        this.index = BaseSolverObject.index++;\n    }\n\n    update(step) {\n\n    }\n\n    accelerate(acc) {\n\n    }\n\n    collide(obj) {\n\n    }\n\n    addToGrid(collisionGrid) {\n\n    }\n\n    abstract moveBy(delta: Vec2);\n\n    abstract isPointInsideObject(point: Vec2): boolean;\n\n    static index = 0;\n}\n","import { Vec2 } from \"../vector/vec2\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport { Vec2Math } from \"../vector/vec2Math\";\nimport {SolverObjectTypes} from \"./types\";\nimport { collide } from \"./collisionModels\";\nimport {BaseSolverObject} from \"./object\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class BallsObject extends BaseSolverObject {\n    acc = Vec2.Zero();\n\n    radius = 10;\n    bounceValue = 1.1;\n\n    type = SolverObjectTypes.TypeBall;\n    immovable = false;\n\n    /**\n     * Creates balls object\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super();\n        this.previousPosition = position.copy();\n        this.currentPosition = position.copy();\n        if (radius !== undefined) {\n            this.radius = radius\n        }\n    }\n\n    /**\n     * Updates state of object\n     * @param {number} step\n     */\n    update(step) {\n        const velocity = this.velocity;\n        this.previousPosition = this.currentPosition.copy();\n        this.currentPosition.addSelf(\n            velocity.addSelf(\n                this.acc.mul(step * step)\n            )\n        )\n        this.acc = Vec2.Zero();\n    }\n\n    accelerate(acc) {\n        this.acc.addSelf(acc);\n        return this;\n    }\n\n    setVelocity(vel) {\n        this.velocity = vel;\n        return this;\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    collide(obj) {\n        collide(this, obj)\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObject(\n            Math.floor(this.currentPosition.x),\n            Math.floor(this.currentPosition.y),\n            this\n        )\n    }\n\n    moveBy(delta: Vec2) {\n        this.currentPosition.addSelf(delta);\n    }\n\n    isPointInsideObject(point: Vec2): boolean {\n        return Vec2Math.distance(this.currentPosition, point) < this.radius;\n    }\n\n    get velocity() {\n        return Vec2Math.diff(\n            this.currentPosition,\n            this.previousPosition\n        );\n    }\n\n    set velocity(v) {\n        this.previousPosition = Vec2Math.diff(this.currentPosition,v);\n    }\n\n    /**\n     *\n     * @returns {Vec2Line}\n     */\n    get movementVector() {\n        return new Vec2Line(this.previousPosition, this.currentPosition);\n    }\n}","export class Constrain {\n    constructor() {\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    applyConstrain(obj) {\n\n    }\n}","import { Constrain } from \"./constrain\";\n\nexport class ViewportConstrain extends Constrain {\n    _width = 0;\n    _height = 0;\n\n    constructor(width, height) {\n        super()\n        this.width = width;\n        this.height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    set width(width) {\n        this._width = width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set height(height) {\n        this._height = height;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        if (obj.currentPosition.x - obj.radius < 0) {\n            obj.currentPosition.x = obj.radius;\n        }\n\n        if (obj.currentPosition.x + obj.radius > this._width) {\n            obj.currentPosition.x = this._width - obj.radius;\n        }\n\n        if (obj.currentPosition.y - obj.radius < 0) {\n            obj.currentPosition.y = obj.radius;\n        }\n\n        if (obj.currentPosition.y + obj.radius > this._height) {\n            obj.currentPosition.y = this._height - obj.radius;\n        }\n    }\n}","import {Constrain} from \"./constrain\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class CircleConstrain extends Constrain {\n    /**\n     *\n     * @type {Vec2}\n     */\n    center = Vec2.Zero();\n\n    radius = 0;\n\n    constructor(center, radius) {\n        super();\n\n        this.center = center;\n        this.radius = radius;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        const toCenter = obj.currentPosition.diff(this.center);\n        const distance = toCenter.length;\n        const r = obj.radius;\n\n        if (distance > (this.radius - r)) {\n            const n = toCenter.ort;\n            obj.currentPosition = this.center.sum(\n                n.mul(this.radius - r)\n            );\n        }\n    }\n\n}","export class ObjectsGenerator {\n    solver = null;\n    constructor(solver) {\n        this.solver = solver;\n    }\n\n    // TODO Make me iterator\n    getNextObject(step) {\n        return [];\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\n\nexport class MappedObjectGeneratorItem {\n    /**\n     * Delay before object appear\n     * @type {number}\n     */\n    timeout;\n\n    /**\n     * Object configuration\n     * @type {BallsObject}\n     */\n    object;\n\n    constructor(timeout, object) {\n        this.timeout = timeout;\n        this.object = object;\n    }\n\n}\n\nexport class MappedObjectsGenerator extends ObjectsGenerator {\n    /**\n     * @param {MappedObjectGeneratorItem[]} map\n     */\n    constructor(solver, map) {\n        super(solver);\n\n        this.items = map;\n        this.currentTime = 0;\n    }\n\n    getNextObject(step) {\n        this.currentTime += step;\n\n        console.log(this.currentTime)\n\n        const index = this.items.findIndex((item) => item.timeout < this.currentTime);\n        if (index > -1) {\n            return [this.items.splice(index, 1)[0].object];\n        }\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\nexport class TotalObjectsGenerator extends ObjectsGenerator {\n    constructor(solver, count, delay, createCallback) {\n        super(solver);\n        this.limit = count;\n        this.total = 0;\n\n        this.delay = delay;\n        this.create = createCallback;\n        this.lastCreateTime = 0;\n    }\n\n    getNextObject(step) {\n        if (this.total > this.limit) {\n            return [];\n        }\n\n        this.lastCreateTime += 1;\n        if (this.lastCreateTime > this.delay) {\n            const newItems = this.create(this.total);\n            this.lastCreateTime = 0;\n            this.total+= newItems.length;\n\n            return newItems;\n        }\n    }\n}","import { Vec2 } from \"./vector/vec2\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Vec2Math} from \"./vector/vec2Math\";\n\nexport class CollisionCell {\n    objects: BaseSolverObject[] = [];\n    highlight: boolean = false;\n\n    static MAX_OBJECT_IN_CELL = 10;\n\n    addObject(obj) {\n        if (this.objects.length >= CollisionCell.MAX_OBJECT_IN_CELL) {\n            return\n        }\n\n        this.objects.push(obj);\n    }\n\n    clear() {\n        this.objects = [];\n        this.highlight = false;\n    }\n\n    remove(index) {\n        const objectIndex = this.objects.findIndex(obj => obj.index === index);\n        if (objectIndex !== -1) {\n            this.objects.splice(objectIndex, 1);\n        }\n    }\n\n    get count() {\n        return this.objects.length;\n    }\n}\n\ntype CollisionGridForEachCallback = (column: number, row: number, cell: CollisionCell, index?: number) => void;\n\nexport class CollisionGrid {\n    cells: CollisionCell[] = [];\n    _width: number;\n    _height: number;\n    _size: number;\n    cellSize: Vec2;\n\n    constructor(width, height, cellSize: Vec2) {\n        this._width = width;\n        this._height = height;\n\n        this.cellSize = cellSize;\n\n        this.resize();\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    set width(w: number) {\n        this._width = w;\n        this.resize();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    set height(h: number) {\n        this._height = h;\n        this.resize();\n    }\n\n    resize() {\n        this.cells = [];\n        this._size = this._width * this._height;\n        for (let i = 0; i < this._size; i++) {\n            this.cells.push(new CollisionCell());\n        }\n    }\n\n    addObject(worldX, worldY, obj) {\n        const x = Math.floor(worldX / this.cellSize.x);\n        const y = Math.floor(worldY / this.cellSize.y);\n\n        const index = x * this._height + y;\n        this.addObjectByIndex(index, obj);\n    }\n\n    addObjectByIndex(index, obj) {\n        if (!isNaN(index) && index>=0 && index<this.size) {\n            this.cells[index].addObject(obj);\n        }\n    }\n\n    makeIndexFromVec(vec) {\n        return vec.x * this._height + vec.y;\n    }\n\n    makeIndexFromCoord(x, y) {\n        return x * this._height + y;\n    }\n\n    makeVecFromIndex(index): Vec2 {\n        const x = Math.floor(index / this._height);\n        const y = index - x * this._height;\n        return new Vec2(x, y);\n    }\n\n    /**\n     * Adds object to all cells between given coords\n     * @param worldLeftTop\n     * @param worldRightBottom\n     * @param obj\n     */\n    addObjectToCells(worldLeftTop: Vec2, worldRightBottom: Vec2, obj: BaseSolverObject) {\n        const point1 = Vec2Math.scale(worldLeftTop, this.cellSize).applySelf(Math.floor);\n        const point2 = Vec2Math.scale(worldRightBottom, this.cellSize).applySelf(Math.floor);\n\n        const index1 = this.makeIndexFromVec(point1);\n        const index2 = this.makeIndexFromVec(point2);\n\n        if (point1.x === point2.x) {\n            // Vertical\n            for (let cellIndex = index1; cellIndex < index2; cellIndex++) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else if (point1.y === point2.y) {\n            // Horizontal\n            for (let cellIndex = index1; cellIndex < index2; cellIndex+=this.height) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else {\n            let left = Math.min(point1.x, point2.x);\n            let top = Math.min(point1.y, point2.y);\n            let right = Math.max(point1.x, point2.x);\n            let bottom = Math.max(point1.y, point2.y);\n            let height = bottom - top;\n            let startFrom = this.makeIndexFromCoord(left, top);\n\n            for (let x = 0; x <= right-left; x++) {\n                for (let y = 0; y <= height; y++) {\n                    const cellIndex= startFrom + x * this.height + y;\n                    this.addObjectByIndex(cellIndex, obj);\n                }\n            }\n        }\n    }\n\n    clear() {\n        for (let i = 0; i < this.size; i++) {\n            this.cells[i].clear();\n        }\n    }\n\n    forEach(callback: CollisionGridForEachCallback) {\n        this.cells.forEach((cell, index) => {\n            const pos = this.makeVecFromIndex(index);\n            callback(pos.x, pos.y, cell, index);\n        })\n    }\n\n    hasCell(index, dt) {\n        if (index < 0 || index >= this.size) {\n            return false;\n        }\n\n        const pos = this.makeVecFromIndex(index);\n\n        const x = pos.x;\n        const y = pos.y;\n\n        if (y <= 0 && dt < 0) {\n            // TOP CELL\n            return false;\n        }\n\n        if (y === this.height - 1 && dt > 0) {\n            // Bottom cell\n            return  false;\n        }\n\n        if (x === 0 && dt < 0) {\n            // left cell\n            return false;\n        }\n\n        if (x >= this.width - 1 && dt > 0) {\n            // right cell;\n            return false;\n        }\n\n        return true;\n    }\n}\n","import {Vec2} from \"./vector/vec2\";\nimport {BallsObject} from \"./objects/ball\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Constrain} from \"./constrains/constrain\";\nimport {CollisionCell, CollisionGrid} from \"./grid\";\n\nexport class Solver {\n    objects: BaseSolverObject[] = []\n    constrains: Constrain = null;\n    gravity: Vec2 = Vec2.Zero();\n    subSteps: number = 4;\n    useFixedTime: boolean = true;\n    step: number;\n    collisionGrid: CollisionGrid;\n    worldSize: Vec2;\n\n    cellSize: Vec2;\n\n    constructor(worldSize) {\n        this.objects = [];\n        this.worldSize = worldSize.copy();\n\n        this.configure();\n    }\n\n    configure() {\n        this.gravity = new Vec2(0, 100);\n\n        this.useFixedTime = true;\n        this.step = 0.017 / this.subSteps;\n\n        const cellSize = 16;\n\n        const gridX = Math.round(this.worldSize.x / cellSize);\n        const gridY = Math.round(this.worldSize.y / cellSize);\n\n        this.cellSize = new Vec2(\n            this.worldSize.x / gridX,\n            this.worldSize.y / gridY\n        );\n\n        this.collisionGrid = new CollisionGrid(\n            gridX, gridY,\n            this.cellSize\n        )\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n    }\n\n    /**\n     * Update the simulation by given step.\n     * @param {number} time amount of seconds passed since last update.\n     */\n    update(time) {\n        const subTime = this.useFixedTime ? this.step : time / this.subSteps;\n        for (let i = 0; i < this.subSteps; i++) {\n            this.addObjectsToGrid();\n            this.processCollisions();\n            this.applyGravity();\n            this.updateObjects(subTime);\n            this.applyConstrains();\n        }\n    }\n\n    addObjectsToGrid() {\n        this.collisionGrid.clear();\n        this.objects.forEach((obj, index) => {\n            obj.addToGrid(this.collisionGrid);\n        });\n    }\n\n    /**\n     * Update objects state\n     * @param {number} time amount of seconds passed since last update\n     */\n    updateObjects(time) {\n        this.objects.forEach(obj => obj.update(time))\n    }\n\n    applyGravity() {\n        this.objects.forEach(obj => obj.accelerate(this.gravity))\n    }\n\n    applyConstrains() {\n        this.objects.forEach(obj => this.constrains.applyConstrain(obj))\n    }\n\n    processCollisionsInCell(objA: BaseSolverObject, cell: CollisionCell) {\n        cell.objects.forEach(objB => {\n            if (objA === objB) {\n                return;\n            }\n\n            if (objA.immovable && objB.immovable) {\n                return;\n            }\n\n            objA.collide(objB);\n        })\n    }\n\n    processCell(index: number) {\n        this.collisionGrid.cells[index].objects.forEach(objA => {\n            this.processCollisionsInCell(objA, this.collisionGrid.cells[index]); // SELF\n\n            if (this.collisionGrid.hasCell(index, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - 1]); // TOP\n            }\n\n            if (this.collisionGrid.hasCell(index, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + 1]); // BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height - 1]); // RIGHT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height]); // RIGHT\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height + 1]); // RIGHT BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height - 1]); // LEFT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height]); // LEFT\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height + 1]); // LEFT BOTTOM\n            }\n        })\n    }\n\n    processCollisions() {\n        for (let index = 0; index < this.collisionGrid.size; index++) {\n            this.processCell(index);\n        }\n    }\n}\n\nfunction makeKey(obj1, obj2) {\n    return [obj1.index, obj2.index].sort().join('-');\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Rect extends Item {\n    size = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, size, color) {\n        super(context, position);\n\n        this.size = size;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(\n            this.position.x,\n            this.position.y,\n            this.position.x + this.size.x,\n            this.position.y + this.size.y\n        )\n    }\n}","export class RenderableObject {\n    /**\n     * @type {BallsObject}\n     */\n    ballsObject = null;\n\n    /**\n     * @type {Item}\n     */\n    renderItem = null;\n\n    constructor(ballsObject, renderItem) {\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        this.renderItem.position = this.ballsObject.currentPosition;\n    }\n\n    render() {\n        this.update();\n        this.renderItem.render();\n    }\n}","import {BallsObject} from \"./ball\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\nimport {SQRT2} from \"../vector/math\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class ImmovableBallsObject extends BallsObject {\n    type = SolverObjectTypes.TypeImmovableBall;\n    immovable = true;\n    bounceValue = 0.5;\n\n    /**\n     * @type {Vec2}\n     * @private\n     */\n    _fixedPosition = null;\n\n    /**\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super(position, radius);\n        this._fixedPosition = position.copy();\n    }\n\n    update(step) {\n        this.currentPosition = this._fixedPosition;\n        this.previousPosition = this._fixedPosition;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        const vec = new Vec2(\n            this.radius * SQRT2,\n            this.radius * SQRT2\n        )\n\n        const leftTop = this.currentPosition.sum(vec);\n        const rightBottom = this.currentPosition.diff(vec);\n\n        collisionGrid.addObjectToCells(\n            leftTop,\n            rightBottom,\n            this\n        );\n    }\n}","import {RenderableObject} from \"./object\";\n\nexport class ImmovableLineRenderableObject extends RenderableObject {\n    /**\n     * @type {ImmovableLineObject}\n     */\n    ballsObject = null;\n\n    constructor(ballsObject, renderItem) {\n        super(ballsObject);\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        super.update();\n        this.renderItem.direction = this.ballsObject._direction;\n    }\n}","import { BallsObject } from \"./ball\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class ImmovableLineObject extends BallsObject {\n    _direction;\n    _line;\n\n    type = SolverObjectTypes.TypeImmovableLine;\n    immovable = true;\n\n    constructor(position, direction) {\n        super(position, 0);\n        this._direction = direction;\n\n        this._line = new Vec2Line(\n            this.currentPosition.copy(),\n            this.currentPosition.copy().sum(this._direction)\n        )\n    }\n\n    update(step) {\n        this.currentPosition = this._line._vec1;\n        this.previousPosition = this._line._vec2;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObjectToCells(\n            this._line._vec1,\n            this._line._vec2,\n            this\n        );\n    }\n\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Line extends Item {\n    direction = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, direction, color) {\n        super(context, position);\n\n        this.direction = direction;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.beginPath(); // Start a new path\n        this.context.moveTo(this.position.x, this.position.y);\n        this.context.lineTo(\n            this.position.x + this.direction.x,\n            this.position.y + this.direction.y\n        );\n        this.context.stroke(); // Render the path\n    }\n}","import {Circle} from \"./circle\";\n\nexport class CircleWithText extends Circle {\n    text = '';\n    textColor = '#ffffff';\n\n    constructor(context, position,r, color, text, textColor) {\n        super(context, position, r, color);\n        this.text = text;\n        if (textColor) {\n            this.textColor = textColor;\n        }\n    }\n\n    render() {\n        super.render();\n        this.context.fillStyle = this.textColor;\n        this.context.textBaseline = \"middle\";\n        this.context.textAlign = \"center\";\n        this.context.fillText(this.text, this.position.x, this.position.y);\n    }\n}","import {Rect} from \"./rect\";\n\nexport class Frame extends Rect {\n    constructor(context, position, size, color) {\n        super(context, position, size, color);\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.strokeRect(\n            this.position.x,\n            this.position.y,\n            this.size.x,\n            this.size.y\n        )\n    }\n\n    queue() {\n\n    }\n}","import {Circle} from \"./items/circle\";\nimport {Vec2} from \"./vector/vec2\";\nimport {Vec2Math} from \"./vector/vec2Math\";\nimport {BallsObject} from \"./objects/ball\";\nimport {ViewportConstrain} from \"./constrains/viewport\";\nimport {CircleConstrain} from \"./constrains/circle\";\nimport {MappedObjectGeneratorItem, MappedObjectsGenerator} from \"./mappedObjectsGenerator\";\nimport {TotalObjectsGenerator} from \"./totalObjectsGenerator\";\nimport {Solver} from \"./solver\";\nimport {Rect} from \"./items/rect\";\nimport {RenderableObject} from \"./renderableObjects/object\";\nimport {ImmovableBallsObject} from \"./objects/immovableBall\";\nimport {ImmovableLineRenderableObject} from \"./renderableObjects/immovableLine\";\nimport {ImmovableLineObject} from \"./objects/immovableLine\";\nimport {Line} from \"./items/line\";\nimport {CircleWithText} from \"./items/circleWithText\";\nimport {Frame} from \"./items/frame\";\n\nconst balls = [\n    new MappedObjectGeneratorItem(\n        1,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        2,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        3,\n        new BallsObject(new Vec2(10, 10))\n    ),\n]\n\nconst milkShakePoints = [\n    new Vec2(0, 0),\n    new Vec2(70, 380),\n    new Vec2(270, 380),\n    new Vec2(340, 0)\n]\n\nconst milkShakeLines = [\n    [milkShakePoints[0], Vec2Math.diff(milkShakePoints[0], milkShakePoints[1]).flipSelf()],\n    [milkShakePoints[1], Vec2Math.diff(milkShakePoints[1], milkShakePoints[2]).flipSelf()],\n    [milkShakePoints[2], Vec2Math.diff(milkShakePoints[2], milkShakePoints[3]).flipSelf()]\n]\n\nconst ballsColors = {\n    57: '#ffffff',\n    78: '#ffffff',\n    71: '#ffffff',\n    86: '#ffffff',\n    200: '#ffffff',\n    202: '#ffffff',\n    218: '#ffffff',\n}\n\nfunction index2color(index) {\n    const frequency=5/1000;\n    const r = Math.floor(Math.sin(frequency*index + 0) * (127) + 128);\n    const g = Math.floor(Math.sin(frequency*index + 2) * (127) + 128);\n    const b = Math.floor(Math.sin(frequency*index + 4) * (127) + 128);\n    return `rgba(${r}, ${g}, ${b}, 1)`;\n}\n\nexport class Render {\n    /**\n     * List of balls\n     * @type {RenderableObject[]}\n     */\n    objects = []\n\n    /**\n     * @type {Constrain}\n     */\n    constrains = null;\n\n    /**\n     * Solver for physics\n     * @type {Solver}\n     */\n    solver = null;\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.context = this.canvas.getContext(\"2d\");\n\n        this.timeRenderStart = performance.now();\n        this.timeRenderEnd = performance.now();\n        this.step = 0;\n\n        /**\n         * @type {RenderableObject[]}\n         */\n        this.objects = [];\n\n        this.items = [];\n\n        this.generator = null;\n        this.solver = null\n\n        this.redBall = null;\n\n        this.configure();\n    }\n\n    configure() {\n        this.solver = new Solver(\n            new Vec2(\n                this.canvas.width,\n                this.canvas.height\n            )\n        );\n\n        this.context.font = '10px serif';\n\n        //this.switchToCircleConstrain();\n        this.switchToViewportConstrain();\n        this.solver.constrains = this.constrains;\n\n        const canvasCenter = new Vec2(\n            this.canvas.width / 2,\n            this.canvas.height / 2\n        );\n\n        const ballGeneratorPoint = canvasCenter.diff(\n            new Vec2(\n                300,\n                300\n            )\n        )\n        const ballVelocity = new Vec2(\n            2, -2\n        ).mul(1/this.solver.subSteps);\n\n        this.generator = new TotalObjectsGenerator(\n            this.solver,\n            1000,\n            7,\n            (index) => {\n                const obj = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint,\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index+200),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                const obj2 = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint.sum(\n                            Vec2.Down(20)\n                        ),\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index+100),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                const obj3 = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint.sum(\n                            Vec2.Down(-20)\n                        ),\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                return [obj,obj2, obj3];\n            }\n        );\n\n        this.redBall = new RenderableObject(\n            new ImmovableBallsObject(new Vec2(230, 50), 30),\n            new Circle(this.context, Vec2.Zero(), 30, '#ff0000')\n        );\n\n        this.addObject(this.redBall);\n\n        milkShakeLines.forEach(line => {\n            this.addObject(new ImmovableLineRenderableObject(\n                new ImmovableLineObject(\n                    line[0].sum(\n                        canvasCenter.diff(new Vec2(340/2, 380/2))\n                    ),\n                    line[1]\n                ),\n                new Line(\n                    this.context,\n                    Vec2.Zero(),\n                    Vec2.Zero(),\n                    '#ffffff'\n                )\n            ));\n        });\n    }\n\n    processUserInput(event) {\n        if (event.leftButtonDown) {\n            if (this.redBall.ballsObject.isPointInsideObject(\n                new Vec2(\n                    event.screenX,\n                    event.screenY\n                )\n            )) {\n                this.canMoveRedObject = true;\n            }\n\n            if (this.canMoveRedObject) {\n                this.redBall.ballsObject.moveBy(\n                    new Vec2(\n                        event.dx,\n                        event.dy\n                    )\n                )\n            }\n        } else {\n            this.canMoveRedObject = false;\n        }\n    }\n\n    /**\n     * @param {RenderableObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n        this.solver.addObject(obj.ballsObject);\n    }\n\n    update(time) {\n        this.solver.update(time);\n    }\n\n    generatorsTick(time) {\n        const newBalls = this.generator.getNextObject(time);\n        if (newBalls) {\n            newBalls.forEach(ball => this.addObject(ball));\n        }\n    }\n\n    tick() {\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.generatorsTick(this.step / 1000);\n        this.update(this.step / 1000);\n\n        this.clear();\n        this.renderItems();\n        //this.renderGrid();\n\n        this.printFPS();\n\n        Vec2.lengthCallsCount = 0;\n    }\n\n    nextFrame = (time) => {\n        this.step = time - this.timeRenderEnd;\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = time;\n        self.requestAnimationFrame(this.nextFrame);\n    }\n\n    nextInterval = () => {\n        this.timeRenderStart = performance.now()\n        this.step = this.timeRenderStart - this.timeRenderEnd;\n\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = performance.now();\n    }\n\n    renderItems() {\n        this.items.forEach(item => item.render());\n        this.objects.forEach(obj => obj.render());\n    }\n\n    printText(text, x, y) {\n        this.context.fillStyle = \"#ffffff\";\n        this.context.textAlign = \"start\";\n        this.context.fillText(text, x, y);\n    }\n\n    printFPS() {\n        this.context.fillStyle = 'rgba(0,0,0,0.1)';\n        this.context.fillRect(0, 0, 100, 60);\n        this.printText(`${Math.round(this.step)} ms / ${Math.round(1000/this.step)} FPS`, 0, 10);\n        this.printText(`Length calls: ${Vec2.lengthCallsCount}`, 0 , 20);\n        this.printText(`Lenght2 calls: ${Vec2.length2CallsCount}`, 0 , 30);\n        this.printText(`Objects: ${this.objects.length}`, 0, 40);\n        this.printText(`Compares per object: ${Math.round(Vec2.lengthCallsCount / this.objects.length)}`, 0, 50);\n    }\n\n    clear() {\n        this.context.fillStyle = \"rgba(0, 0, 0, 0.9)\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    }\n\n    start() {\n        if (self.requestAnimationFrame) {\n            self.requestAnimationFrame(this.nextFrame);\n        } else {\n            setInterval(this.nextInterval, 16)\n        }\n    }\n\n    renderGrid() {\n        this.solver.collisionGrid.forEach((column, row, cell, index) => {\n            const cellPosition = new Vec2(\n                column * this.solver.cellSize.x,\n                row * this.solver.cellSize.y,\n            );\n            const rect = new Frame(\n                this.context,\n                cellPosition,\n                this.solver.cellSize.diff(new Vec2(5, 5)),\n                cell.count > 0 ? '#ff0000' : '#00ff00'\n            )\n\n            if (cell.highlight) {\n                this.context.lineWidth = 10;\n            }\n\n            rect.render();\n\n            this.context.lineWidth = 1;\n            this.printText(\n                index,\n                cellPosition.x + this.solver.cellSize.x / 2,\n                cellPosition.y + this.solver.cellSize.y / 2\n            )\n        })\n    }\n\n    switchToCircleConstrain() {\n        this.constrains = new CircleConstrain(\n            new Vec2(this.canvas.width / 2, this.canvas.height / 2),\n            this.canvas.height / 2\n        )\n\n        this.items.push(\n            new Circle(\n                this.context,\n                this.canvas.width / 2,\n                this.canvas.height / 2,\n                this.canvas.height / 2,\n                '#000000'\n            )\n        );\n    }\n\n    switchToViewportConstrain() {\n        this.constrains = new ViewportConstrain(this.canvas.width, this.canvas.height)\n        // this.items.push(\n        //     new Rect(\n        //         this.context,\n        //         Vec2.Zero(),\n        //         new Vec2(\n        //             this.canvas.width,\n        //             this.canvas.height\n        //         ),\n        //         '#000000'\n        //     )\n        // );\n    }\n}","import {Render} from \"../render\";\nimport {UIEvent, UserInput} from \"./input\";\n\nexport class DirectApplication {\n    render;\n    userInput;\n\n    constructor(canvas) {\n        this.render = new Render(canvas);\n        this.render.start();\n\n        this.userInput = new UserInput(canvas);\n        this.userInput.addHandler(this.sendUserInputEvent);\n    }\n\n    sendUserInputEvent = (event) => {\n        this.render.processUserInput(event)\n    }\n}","import { onReady }  from \"../utils/onReady\";\nimport { getElement } from \"../utils/getElement\";\n\nimport {WorkerApplication} from \"./worker\";\nimport {DirectApplication} from \"./direct\";\n\nfunction initApplication() {\n    console.log('Init application');\n    /**\n     * @var {HTMLCanvasElement}\n     */\n    const canvas = getElement(\"#image_canvas\");\n    const container = getElement('#container');\n    canvas.width = container.offsetWidth;\n    canvas.height = container.offsetHeight;\n\n    if (canvas.transferControlToOffscreen) {\n        console.log('Render in worker');\n        const application = new WorkerApplication(canvas);\n    } else {\n        // There is no support for offscreen render\n        console.log('Render in main thread');\n        const application = new DirectApplication(canvas);\n    }\n}\n\nonReady(initApplication);"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$8a42e5d5abfdc424$var$DOCUMENT_STATE_LOADING","$1fdac2036baae513$export$9a8db54f22040fa8","$1fdac2036baae513$export$d16800b7e59a8051","selector","element","document","querySelector","$d3804a29dc1a199d$export$3ac5e585cf392ee0","UserInput","canvas","_this","this","mouseEnter","browserEvent","event","createMouseEvent","processEvent","_oldX","screenX","_oldY","screenY","mouseLeave","mouseMove","mouseDown","_leftButtonDown","mouseUp","click","_canvas","_handlers","Set","addHandlers","prototype","addEventListener","removeHandlers","forEach","callback","addHandler","add","removeHandler","has","delete","offsetX","offsetY","dx","dy","leftButtonDown","$487fbef3d17229d7$export$80edbf15fa61a4db","MessageType","$487fbef3d17229d7$export$fbae1a0d0e7e2437","type","MessageNone","$487fbef3d17229d7$export$fd1648b71482b662","_super","MessageInit","call","$487fbef3d17229d7$var$__extends","$487fbef3d17229d7$export$45b98a991719aa36","MessageUserInput","$cfc619e94ff51e3f$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","$db8638db384bfa05$var$url","resolve","url","$db8638db384bfa05$exports","toString","$596f524a52f7b157$export$6bb4378561ad428b","WorkerApplication","sendUserInputEvent","worker","postMessage","$487fbef3d17229d7$exports","Worker","offscreen","transferControlToOffscreen","userInput","initUserInput","$bb9a5d09fff8458d$export$2e2bcd8739ae039","obj","key","value","defineProperty","enumerable","configurable","writable","$a6936b4fcc1e5196$export$79992de41895b472","Vec2Exception","$a6936b4fcc1e5196$var$__extends","$a6936b4fcc1e5196$export$98e05f023e6bbbeb","Vec2ExceptionParallel","$a6936b4fcc1e5196$export$cc5bbfba1d12de75","Vec2ExceptionNoPerpendicularVectorToZeroVector","$2505c283ed2892c9$export$92b0492af2e4b152","Vec2Math","diff","vec1","vec2","$5bec02886827ca72$export$ac4bca90992eed1","x","y","mul","scalar","distance","distance2","length2","intersect","line1","line2","K","$a6936b4fcc1e5196$exports","isNaN","makeVec2FromX","_vec1","B","dot","mirror","vec","line","normal","direction","perpendicular","scale","$a55f88b4cec19eb7$export$9201df218db36553","$a55f88b4cec19eb7$export$3681641e15b6e2c3","Math","sqrt","Vec2","l","_x","_y","_length","_length2","get","set","lengthCallsCount","length2CallsCount","addSelf","subSelf","flipYSelf","flipXSelf","flipSelf","equals","sum","copy","applySelf","Horizontal","ort","Vertical","Zero","Down","Right","$ac411b27688e0230$export$6d08773d2e66f8f2","render","queue","constructor","context","position","$862240837b78d20e$export$c89a927ffc67e6fa","beginPath","arc","r","PI","fillStyle","color","fill","super","$115b3ffbba5929a2$export$a59432db1b5f15cd","SolverObjectTypes","$86a9a27bf40815b1$export$769818a274da100a","Vec2Line","_vec2","_k","_b","_direction","_ort","calculateKB","inBetween","a","b","error","abs","NaN","moveBy","getPointProjection","cosabD","Number","MAX_SAFE_INTEGER","$0755b85fc87973c5$export$98e6d07575f46913","obj1","obj2","flipped","$0755b85fc87973c5$var$flipObjects","TypeBall","between","currentPosition","requiredDistance","radius","normalized","delta","bounceValue","$0755b85fc87973c5$export$23e74c69ee7b6dae","TypeImmovableBall","ball","immovable","$0755b85fc87973c5$export$6d6f4258faab0992","TypeImmovableLine","projectionPoint","_line","e","$0755b85fc87973c5$export$4d790f09e0e06cd9","$80ec6e923e7061e1$export$8387ea1f2c3d2dbf","BaseSolverObject","TypeNull","previousPosition","index","update","step","accelerate","acc","collide","addToGrid","collisionGrid","$5f6cb7b2ae088052$export$e4134913c977dac4","BallsObject","undefined","$5f6cb7b2ae088052$var$__extends","velocity","setVelocity","vel","addObject","floor","isPointInsideObject","point","v","$4b97689a079fa103$export$504c072c1a75a697","applyConstrain","$00201ec98320169b$export$29fb847bec292dd0","width","_width","height","_height","$55d69f42c54bcd4a$export$4384cf344d141b50","toCenter","center","n","$20512bacb769fb3e$export$780b62e628ec518f","getNextObject","solver","$de78521780c1d605$export$cf86583e2e1a386b","timeout","object","$626d113ba09163cc$export$a16316d22a718d27","total","limit","lastCreateTime","delay","newItems","create","count","createCallback","$05c9430a627e931e$export$e172ac46f8971d96","CollisionCell","objects","highlight","MAX_OBJECT_IN_CELL","push","clear","remove","objectIndex","findIndex","splice","$05c9430a627e931e$export$82d945040ef2d6e1","CollisionGrid","cellSize","cells","resize","_size","w","h","worldX","worldY","addObjectByIndex","size","makeIndexFromVec","makeIndexFromCoord","makeVecFromIndex","addObjectToCells","worldLeftTop","worldRightBottom","point1","point2","index1","index2","cellIndex","left","min","top","right","max","startFrom","cell","pos","hasCell","dt","$006ee4c54bdcd9e0$export$cca492cadf45c096","Solver","worldSize","constrains","gravity","subSteps","useFixedTime","configure","gridX","round","gridY","time","subTime","addObjectsToGrid","processCollisions","applyGravity","updateObjects","applyConstrains","processCollisionsInCell","objA","objB","processCell","$13f1a36200857cbe$export$c79fc6492f3af13d","fillRect","$da117db74631a5a9$export$c682e94218fd2425","renderItem","ballsObject","$fb1559145f2431f3$export$231acc6c5e36d927","ImmovableBallsObject","_fixedPosition","$fb1559145f2431f3$var$__extends","leftTop","rightBottom","$5f6cb7b2ae088052$exports","$e49b4ba0f9c8089a$export$d17c9f1e24f0afb0","$f377ce8e28f2416b$export$35284351ee95db01","ImmovableLineObject","$f377ce8e28f2416b$var$__extends","$00d306546736e72e$export$17d680238e50603e","strokeStyle","moveTo","lineTo","stroke","$3fdf4f031363924a$export$d56a2681f508d897","textColor","textBaseline","textAlign","fillText","text","$b54965c0904d6775$export$b89a827e9254211a","strokeRect","$b782825b1529bae2$var$milkShakePoints","$b782825b1529bae2$var$milkShakeLines","$b782825b1529bae2$var$index2color","frequency","sin","$b782825b1529bae2$export$160ae30d75f98247","font","switchToViewportConstrain","canvasCenter","ballGeneratorPoint","ballVelocity","generator","redBall","$fb1559145f2431f3$exports","$f377ce8e28f2416b$exports","processUserInput","canMoveRedObject","generatorsTick","newBalls","tick","renderItems","printFPS","items","item","printText","start","requestAnimationFrame","nextFrame","setInterval","nextInterval","renderGrid","column","row","cellPosition","rect","lineWidth","switchToCircleConstrain","timeRenderEnd","timeRenderStart","performance","now","getContext","$10de9792dab2d4db$export$a712f6800434119d","console","log","container","offsetWidth","offsetHeight","readyState"],"version":3,"file":"index.f1cba274.js.map"}