{"mappings":"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","sources":["node_modules/@swc/helpers/src/_define_property.mjs","src/render/vector/exceptions.ts","src/render/vector/vec2Math.ts","src/render/vector/math.ts","src/render/vector/vec2.ts","src/render/items/item.js","src/render/items/circle.js","src/render/vector/vec2Line.ts","src/render/objects/types.ts","src/render/objects/collisionModels.js","src/render/objects/object.ts","src/render/objects/ball.ts","src/render/constrains/constrain.js","src/render/constrains/viewport.js","src/render/constrains/circle.js","src/render/objectsGenerator.js","src/render/mappedObjectsGenerator.js","src/render/totalObjectsGenerator.js","src/render/grid.ts","src/render/solver.ts","src/render/items/rect.js","src/render/renderableObjects/object.js","src/render/objects/immovableBall.ts","src/render/renderableObjects/immovableLine.js","src/render/objects/immovableLine.ts","src/render/items/line.js","src/render/items/circleWithText.js","src/render/items/frame.js","src/render/index.js","src/host/messages.ts","src/worker/main.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export class Vec2Exception extends Error {}\n\nexport class Vec2ExceptionParallel extends Vec2Exception {}\nexport class Vec2ExceptionNoPerpendicularVectorToZeroVector extends Vec2Exception {}","import { Vec2 } from \"./vec2\";\nimport { Vec2ExceptionParallel } from \"./exceptions\";\nimport { Vec2Line } from \"./vec2Line\";\n\nexport class Vec2Math {\n    static diff(vec1: Vec2, vec2: Vec2): Vec2 {\n        return new Vec2(vec1.x - vec2.x, vec1.y - vec2.y);\n    }\n\n    static mul(vec1: Vec2, scalar: number): Vec2 {\n        return new Vec2(vec1.x * scalar, vec1.y * scalar);\n    }\n\n    /**\n     * Calculates distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length;\n    }\n\n    /**\n     * Calculates square of distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance2(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length2;\n    }\n\n    /**\n     * Finds intersection between 2 lines\n     * @param {Vec2Line} line1\n     * @param {Vec2Line} line2\n     * @returns {Vec2}\n     */\n    static intersect(line1, line2) {\n        if (line1.K === line2.K) {\n            throw new Vec2ExceptionParallel()\n        }\n\n        if (isNaN(line1.K) || isNaN(line2.K)) {\n            // One of two lines is vertical\n            if (isNaN(line1.K)) {\n                return line2.makeVec2FromX(line1._vec1.x);\n            } else {\n                return line1.makeVec2FromX(line2._vec1.x);\n            }\n        } else {\n            const x = (line1.B - line2.B) / (line2.K - line1.K);\n            return line1.makeVec2FromX(x);\n        }\n    }\n\n    /**\n     * Dot product of 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static dot(vec1: Vec2, vec2: Vec2): number {\n        return vec1.x * vec2.x + vec1.y * vec2.y;\n    }\n\n    /**\n     *\n     * @param {Vec2} vec\n     * @param {Vec2Line} line\n     * @returns {Vec2}\n     */\n    static mirror(vec: Vec2, line: Vec2Line) {\n        const normal = line.direction.perpendicular;\n        return vec.diff(\n            normal.mul(2 * Vec2Math.dot(vec, normal))\n        );\n    }\n\n    static scale(vec1: Vec2, vec2: Vec2) {\n        return new Vec2(\n            vec1.x / vec2.x,\n            vec1.y / vec2.y\n        )\n    }\n}\n","export const MATH_ERROR = 0.000001;\nexport const MATH_ERROR2 = MATH_ERROR * MATH_ERROR;\nexport const SQRT2 = Math.sqrt(2);\n\n/**\n * Checks if a equals b with given error\n * @param {number} a\n * @param {number} b\n * @param {number} error\n * @returns {boolean}\n */\nexport function isEqual(a, b, error) {\n    return Math.abs(a - b) < error;\n}\n\nexport type NullableNumber = number | null;\n","import { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR2, NullableNumber } from \"./math\";\nimport { Vec2ExceptionNoPerpendicularVectorToZeroVector } from \"./exceptions\";\n\nexport class Vec2 {\n    private _x: number = 0;\n    private _y: number = 0;\n    private _length: NullableNumber = null;\n    private _length2: NullableNumber = null;\n\n    static lengthCallsCount = 0;\n    static length2CallsCount = 0;\n\n    constructor(x: number, y: number, l?: number) {\n        this._x = x;\n        this._y = y;\n\n        if (l) {\n            this._length = l;\n            this._length2 = l * l;\n        }\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set x(x: number) {\n        this._x = x;\n        this._length = null;\n    }\n\n    set y(y:number) {\n        this._y = y;\n        this._length = null;\n    }\n\n    get length(): number {\n        if (this._length === null) {\n            this._length = Math.sqrt(this.x*this.x + this.y*this.y);\n            Vec2.lengthCallsCount++;\n        }\n\n        return this._length;\n    }\n\n    /**\n     * Returns length^2\n     */\n    get length2(): number {\n        if (this._length2 === null) {\n            this._length2 = this._x*this._x + this._y*this._y;\n            Vec2.length2CallsCount++;\n        }\n\n        return this._length2;\n    }\n\n    /**\n     * Adds vec2 to current vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    addSelf(vec2: Vec2): Vec2 {\n        this._x += vec2.x;\n        this._y += vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Subtract from current vector given vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    subSelf(vec2: Vec2): Vec2 {\n        this._x -= vec2.x;\n        this._y -= vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Flips along X axis\n     * @returns {Vec2}\n     */\n    flipYSelf(): Vec2 {\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Flips along Y axis\n     * @returns {Vec2}\n     */\n    flipXSelf(): Vec2 {\n        this._x = -this._x;\n        return this;\n    }\n\n    flipSelf(): Vec2 {\n        this._x = -this._x;\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Checks if this vector equals given vector using global MATH_ERROR const\n     * @param vec2\n     */\n    equals(vec2) {\n        return Vec2Math.distance2(this, vec2) < MATH_ERROR2;\n    }\n\n    /**\n     * Sums current vector and given vector and returns new vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    sum(vec2: Vec2): Vec2 {\n        return new Vec2(this.x + vec2.x, this.y + vec2.y);\n    }\n\n    /**\n     * Calculate difference between current vector and given vector and returns\n     * new vector\n     *\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    diff(vec2: Vec2) {\n        return new Vec2(this.x - vec2.x, this.y - vec2.y);\n    }\n\n    /**\n     * Multiplicates vector by number\n     * @param {number} value\n     * @returns {Vec2}\n     */\n    mul(value: number) {\n        return new Vec2(this.x * value, this.y * value);\n    }\n\n    copy() {\n        return new Vec2(this.x, this.y);\n    }\n\n    applySelf(callback): Vec2 {\n        this.x = callback(this.x);\n        this.y = callback(this.y);\n        return this;\n    }\n\n    /**\n     * Returns normalized vector\n     * @returns {Vec2}\n     */\n    get ort() {\n        const l = this.length;\n        return new Vec2(this.x / l, this.y / l, 1);\n    }\n\n    get perpendicular() {\n        if (this.x === 0) {\n            // Vertical\n            if (this.y > 0) {\n                return Vec2.Horizontal().ort\n            } else if (this.y < 0) {\n                return Vec2.Horizontal().ort.flipSelf();\n            } else {\n                throw new Vec2ExceptionNoPerpendicularVectorToZeroVector();\n            }\n        } else if (this.y === 0) {\n            // Horizontal\n            if (this.x > 0) {\n                return Vec2.Vertical().ort\n            } else if (this.x < 0) {\n                return Vec2.Vertical().ort.flipSelf();\n            }\n        }\n\n        return new Vec2(\n            -this.y / this.x,\n            1\n        ).ort;\n    }\n\n    static Zero() {\n        return new Vec2(0, 0);\n    }\n\n    static Horizontal() {\n        return new Vec2(1, 0);\n    }\n\n    static Vertical() {\n        return new Vec2(0, 1);\n    }\n\n    static Down(y) {\n        return new Vec2(0, y);\n    }\n\n    static Right(x) {\n        return new Vec2(x, 0);\n    }\n}\n\n\n\n\n\n\n\n\n","import {Vec2} from \"../vector/vec2\";\n\nexport class Item {\n    position = Vec2.Zero();\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    constructor(context, position) {\n        this.context = context;\n        this.position = position;\n    }\n\n    /**\n     * Method immediately renders object on context\n     */\n    render() {\n\n    }\n\n    /**\n     * Method tries to put object in render block\n     */\n    queue() {\n\n    }\n}","import {Item} from \"./item\";\n\nexport class Circle extends Item {\n    r = 0;\n    color = '#00ff00';\n\n    constructor(context, position, r, color) {\n        super(context, position);\n\n        if (r) {\n            this.r = r;\n        }\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.beginPath()\n        this.context.arc(\n            this.position.x,\n            this.position.y,\n            this.r,\n            0,\n            2 * Math.PI\n        )\n\n        this.context.fillStyle = this.color;\n        this.context.fill();\n    }\n}","import { Vec2 } from \"./vec2\";\nimport { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR, isEqual } from \"./math\";\n\nexport class Vec2Line {\n    private _vec1: Vec2 = Vec2.Zero();\n    private _vec2: Vec2 = Vec2.Zero();\n\n    private _direction: Vec2;\n    private _ort: Vec2;\n\n    private _length: number;\n    private _length2: number;\n\n    /**\n     * Y = K*X + B\n     * @type {number}\n     */\n    private _k: number = 0;\n    private _b: number = 0;\n\n    constructor(vec1, vec2) {\n        this._vec1 = vec1;\n        this._vec2 = vec2;\n\n        this._direction = Vec2Math.diff(this._vec1, this._vec2);\n        this._length = this._direction.length;\n        this._length2 = this._direction.length2;\n        this._ort = this._direction.ort;\n\n        this.calculateKB();\n    }\n\n    /**\n     * Determines if given point lays on the line\n     * @param vec\n     * @returns {boolean}\n     */\n    inBetween(vec) {\n        const l1 = Vec2Math.diff(vec, this._vec1).length;\n        const l2 = Vec2Math.diff(this._vec2, vec).length;\n        const sum = l1 + l2;\n\n\n\n\n\n        return isEqual(this._length, sum, MATH_ERROR);\n    }\n\n    calculateKB() {\n        if (this._vec1.y === this._vec2.y) {\n            // Horizontal line\n            this._b = this._vec1.y;\n            this._k = 0;\n        } else if (this._vec1.x === this._vec2.x) {\n            // Vertical line\n            this._b = NaN;\n            this._k = NaN;\n        } else {\n            this._b = (this._vec1.x * this._vec2.y - this._vec1.y * this._vec2.x) / (this._vec1.x - this._vec2.x)\n            this._k = (this._vec1.y - this._vec2.y) / (this._vec1.x - this._vec2.x);\n        }\n    }\n\n    makeVec2FromX(x) {\n        return new Vec2(x, this._k * x + this._b);\n    }\n\n    copy() {\n        return new Vec2Line(\n            this._vec1,\n            this._vec2\n        )\n    }\n\n    moveBy(vec) {\n        this._vec1.addSelf(vec);\n        this._vec2.addSelf(vec);\n        this.calculateKB();\n    }\n\n    getPointProjection(vec) {\n        const a = this.direction;\n        const b = Vec2Math.diff(vec, this._vec1);\n        const cosabD = Vec2Math.dot(a, b) / (this.length);\n\n        return this._vec1.sum(\n            this.ort.mul(cosabD)\n        );\n    }\n\n    get B() {\n        return this._b;\n    }\n\n    get K() {\n        return this._k;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    get ort() {\n        return this._ort;\n    }\n\n    get vec1() {\n        return this._vec1;\n    }\n\n    get vec2() {\n        return this._vec2;\n    }\n\n    static Vertical(x) {\n        return new Vec2Line(\n            new Vec2(x, 0),\n            new Vec2(x, Number.MAX_SAFE_INTEGER)\n        )\n    }\n\n    static Horizontal(y) {\n        return new Vec2Line(\n            new Vec2(0, y),\n            new Vec2(Number.MAX_SAFE_INTEGER, y)\n        )\n    }\n}","export enum SolverObjectTypes {\n    TypeNull = 0,\n    TypeBall = 1,\n    TypeImmovableBall = 2,\n    TypeImmovableLine = 3\n}\n","import {Vec2Math} from \"../vector/vec2Math\";\nimport {BallsObject} from \"./ball\";\nimport {SolverObjectTypes, TYPE_BALL, TYPE_IMMOVABLE_BALL, TYPE_IMMOVABLE_LINE} from \"./types\";\n\n/**\n * Collision between 2 balls objects\n * @param {BallsObject} obj1\n * @param {BallsObject} obj2\n */\nexport function collideBallAndBall(obj1, obj2) {\n    const between = Vec2Math.diff(obj1.currentPosition, obj2.currentPosition);\n    const distance = between.length;\n    const requiredDistance = obj1.radius + obj2.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        obj1.currentPosition.addSelf(Vec2Math.mul(normalized, obj1.radius / requiredDistance * delta * obj1.bounceValue));\n        obj2.currentPosition.subSelf(Vec2Math.mul(normalized, obj2.radius / requiredDistance * delta * obj2.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable ball\n * @param {BallsObject} ball\n * @param {ImmovableBallsObject} immovable\n */\nexport function collideBallAndImmovableBall(ball, immovable) {\n    const between = Vec2Math.diff(\n        ball.currentPosition,\n        immovable.currentPosition\n    );\n\n    const distance = between.length;\n    const requiredDistance = ball.radius + immovable.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        ball.currentPosition.addSelf(Vec2Math.mul(normalized, ball.radius / requiredDistance * delta * ball.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable line\n * @param {BallsObject} ball\n * @param {ImmovableLineObject} line\n */\nexport function collideBallAndImmovableLine(ball, line) {\n    try {\n        const projectionPoint = line._line.getPointProjection(ball.currentPosition);\n\n        if (line._line.inBetween(projectionPoint)) {\n            const between = Vec2Math.diff(\n                projectionPoint,\n                ball.currentPosition\n            )\n\n            if (between.length < ball.radius) {\n                const normalized = between.ort;\n\n                const delta = ball.radius - between.length;\n\n                ball.currentPosition.subSelf(\n                    Vec2Math.mul(normalized, delta * ball.bounceValue)\n                )\n            }\n        }\n    } catch (e) {\n    }\n}\n\nfunction flipObjects(obj1, obj2) {\n    return {\n        a: obj2,\n        b: obj1\n    }\n}\n\nexport function collide(a, b) {\n    let obj1 = a;\n    let obj2 = b;\n    if (obj1.type > obj2.type) {\n        const flipped = flipObjects(obj1, obj2);\n        obj1 = flipped.a;\n        obj2 = flipped.b\n    }\n\n    switch (true) {\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeBall:\n            return collideBallAndBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableBall:\n            return collideBallAndImmovableBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableLine:\n            return collideBallAndImmovableLine(obj1, obj2);\n        default:\n            return;\n    }\n}","import {SolverObjectTypes} from \"./types\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport abstract class BaseSolverObject {\n    readonly type: SolverObjectTypes = SolverObjectTypes.TypeNull;\n    readonly index: number;\n    readonly immovable: boolean;\n\n    previousPosition = Vec2.Zero();\n    currentPosition = Vec2.Zero();\n\n    constructor() {\n        this.index = BaseSolverObject.index++;\n    }\n\n    update(step) {\n\n    }\n\n    accelerate(acc) {\n\n    }\n\n    collide(obj) {\n\n    }\n\n    addToGrid(collisionGrid) {\n\n    }\n\n    abstract moveBy(delta: Vec2);\n\n    abstract isPointInsideObject(point: Vec2): boolean;\n\n    static index = 0;\n}\n","import { Vec2 } from \"../vector/vec2\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport { Vec2Math } from \"../vector/vec2Math\";\nimport {SolverObjectTypes} from \"./types\";\nimport { collide } from \"./collisionModels\";\nimport {BaseSolverObject} from \"./object\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class BallsObject extends BaseSolverObject {\n    acc = Vec2.Zero();\n\n    radius = 10;\n    bounceValue = 1.1;\n\n    type = SolverObjectTypes.TypeBall;\n    immovable = false;\n\n    /**\n     * Creates balls object\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super();\n        this.previousPosition = position.copy();\n        this.currentPosition = position.copy();\n        if (radius !== undefined) {\n            this.radius = radius\n        }\n    }\n\n    /**\n     * Updates state of object\n     * @param {number} step\n     */\n    update(step) {\n        const velocity = this.velocity;\n        this.previousPosition = this.currentPosition.copy();\n        this.currentPosition.addSelf(\n            velocity.addSelf(\n                this.acc.mul(step * step)\n            )\n        )\n        this.acc = Vec2.Zero();\n    }\n\n    accelerate(acc) {\n        this.acc.addSelf(acc);\n        return this;\n    }\n\n    setVelocity(vel) {\n        this.velocity = vel;\n        return this;\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    collide(obj) {\n        collide(this, obj)\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObject(\n            Math.floor(this.currentPosition.x),\n            Math.floor(this.currentPosition.y),\n            this\n        )\n    }\n\n    moveBy(delta: Vec2) {\n        this.currentPosition.addSelf(delta);\n    }\n\n    isPointInsideObject(point: Vec2): boolean {\n        return Vec2Math.distance(this.currentPosition, point) < this.radius;\n    }\n\n    get velocity() {\n        return Vec2Math.diff(\n            this.currentPosition,\n            this.previousPosition\n        );\n    }\n\n    set velocity(v) {\n        this.previousPosition = Vec2Math.diff(this.currentPosition,v);\n    }\n\n    /**\n     *\n     * @returns {Vec2Line}\n     */\n    get movementVector() {\n        return new Vec2Line(this.previousPosition, this.currentPosition);\n    }\n}","export class Constrain {\n    constructor() {\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    applyConstrain(obj) {\n\n    }\n}","import { Constrain } from \"./constrain\";\n\nexport class ViewportConstrain extends Constrain {\n    _width = 0;\n    _height = 0;\n\n    constructor(width, height) {\n        super()\n        this.width = width;\n        this.height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    set width(width) {\n        this._width = width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set height(height) {\n        this._height = height;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        if (obj.currentPosition.x - obj.radius < 0) {\n            obj.currentPosition.x = obj.radius;\n        }\n\n        if (obj.currentPosition.x + obj.radius > this._width) {\n            obj.currentPosition.x = this._width - obj.radius;\n        }\n\n        if (obj.currentPosition.y - obj.radius < 0) {\n            obj.currentPosition.y = obj.radius;\n        }\n\n        if (obj.currentPosition.y + obj.radius > this._height) {\n            obj.currentPosition.y = this._height - obj.radius;\n        }\n    }\n}","import {Constrain} from \"./constrain\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class CircleConstrain extends Constrain {\n    /**\n     *\n     * @type {Vec2}\n     */\n    center = Vec2.Zero();\n\n    radius = 0;\n\n    constructor(center, radius) {\n        super();\n\n        this.center = center;\n        this.radius = radius;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        const toCenter = obj.currentPosition.diff(this.center);\n        const distance = toCenter.length;\n        const r = obj.radius;\n\n        if (distance > (this.radius - r)) {\n            const n = toCenter.ort;\n            obj.currentPosition = this.center.sum(\n                n.mul(this.radius - r)\n            );\n        }\n    }\n\n}","export class ObjectsGenerator {\n    solver = null;\n    constructor(solver) {\n        this.solver = solver;\n    }\n\n    // TODO Make me iterator\n    getNextObject(step) {\n        return [];\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\n\nexport class MappedObjectGeneratorItem {\n    /**\n     * Delay before object appear\n     * @type {number}\n     */\n    timeout;\n\n    /**\n     * Object configuration\n     * @type {BallsObject}\n     */\n    object;\n\n    constructor(timeout, object) {\n        this.timeout = timeout;\n        this.object = object;\n    }\n\n}\n\nexport class MappedObjectsGenerator extends ObjectsGenerator {\n    /**\n     * @param {MappedObjectGeneratorItem[]} map\n     */\n    constructor(solver, map) {\n        super(solver);\n\n        this.items = map;\n        this.currentTime = 0;\n    }\n\n    getNextObject(step) {\n        this.currentTime += step;\n\n        console.log(this.currentTime)\n\n        const index = this.items.findIndex((item) => item.timeout < this.currentTime);\n        if (index > -1) {\n            return [this.items.splice(index, 1)[0].object];\n        }\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\nexport class TotalObjectsGenerator extends ObjectsGenerator {\n    constructor(solver, count, delay, createCallback) {\n        super(solver);\n        this.limit = count;\n        this.total = 0;\n\n        this.delay = delay;\n        this.create = createCallback;\n        this.lastCreateTime = 0;\n    }\n\n    getNextObject(step) {\n        if (this.total > this.limit) {\n            return [];\n        }\n\n        this.lastCreateTime += 1;\n        if (this.lastCreateTime > this.delay) {\n            const newItems = this.create(this.total);\n            this.lastCreateTime = 0;\n            this.total+= newItems.length;\n\n            return newItems;\n        }\n    }\n}","import { Vec2 } from \"./vector/vec2\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Vec2Math} from \"./vector/vec2Math\";\n\nexport class CollisionCell {\n    objects: BaseSolverObject[] = [];\n    highlight: boolean = false;\n\n    static MAX_OBJECT_IN_CELL = 10;\n\n    addObject(obj) {\n        if (this.objects.length >= CollisionCell.MAX_OBJECT_IN_CELL) {\n            return\n        }\n\n        this.objects.push(obj);\n    }\n\n    clear() {\n        this.objects = [];\n        this.highlight = false;\n    }\n\n    remove(index) {\n        const objectIndex = this.objects.findIndex(obj => obj.index === index);\n        if (objectIndex !== -1) {\n            this.objects.splice(objectIndex, 1);\n        }\n    }\n\n    get count() {\n        return this.objects.length;\n    }\n}\n\ntype CollisionGridForEachCallback = (column: number, row: number, cell: CollisionCell, index?: number) => void;\n\nexport class CollisionGrid {\n    cells: CollisionCell[] = [];\n    _width: number;\n    _height: number;\n    _size: number;\n    cellSize: Vec2;\n\n    constructor(width, height, cellSize: Vec2) {\n        this._width = width;\n        this._height = height;\n\n        this.cellSize = cellSize;\n\n        this.resize();\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    set width(w: number) {\n        this._width = w;\n        this.resize();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    set height(h: number) {\n        this._height = h;\n        this.resize();\n    }\n\n    resize() {\n        this.cells = [];\n        this._size = this._width * this._height;\n        for (let i = 0; i < this._size; i++) {\n            this.cells.push(new CollisionCell());\n        }\n    }\n\n    addObject(worldX, worldY, obj) {\n        const x = Math.floor(worldX / this.cellSize.x);\n        const y = Math.floor(worldY / this.cellSize.y);\n\n        const index = x * this._height + y;\n        this.addObjectByIndex(index, obj);\n    }\n\n    addObjectByIndex(index, obj) {\n        if (!isNaN(index) && index>=0 && index<this.size) {\n            this.cells[index].addObject(obj);\n        }\n    }\n\n    makeIndexFromVec(vec) {\n        return vec.x * this._height + vec.y;\n    }\n\n    makeIndexFromCoord(x, y) {\n        return x * this._height + y;\n    }\n\n    makeVecFromIndex(index): Vec2 {\n        const x = Math.floor(index / this._height);\n        const y = index - x * this._height;\n        return new Vec2(x, y);\n    }\n\n    /**\n     * Adds object to all cells between given coords\n     * @param worldLeftTop\n     * @param worldRightBottom\n     * @param obj\n     */\n    addObjectToCells(worldLeftTop: Vec2, worldRightBottom: Vec2, obj: BaseSolverObject) {\n        const point1 = Vec2Math.scale(worldLeftTop, this.cellSize).applySelf(Math.floor);\n        const point2 = Vec2Math.scale(worldRightBottom, this.cellSize).applySelf(Math.floor);\n\n        const index1 = this.makeIndexFromVec(point1);\n        const index2 = this.makeIndexFromVec(point2);\n\n        if (point1.x === point2.x) {\n            // Vertical\n            for (let cellIndex = index1; cellIndex < index2; cellIndex++) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else if (point1.y === point2.y) {\n            // Horizontal\n            for (let cellIndex = index1; cellIndex < index2; cellIndex+=this.height) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else {\n            let left = Math.min(point1.x, point2.x);\n            let top = Math.min(point1.y, point2.y);\n            let right = Math.max(point1.x, point2.x);\n            let bottom = Math.max(point1.y, point2.y);\n            let height = bottom - top;\n            let startFrom = this.makeIndexFromCoord(left, top);\n\n            for (let x = 0; x <= right-left; x++) {\n                for (let y = 0; y <= height; y++) {\n                    const cellIndex= startFrom + x * this.height + y;\n                    this.addObjectByIndex(cellIndex, obj);\n                }\n            }\n        }\n    }\n\n    clear() {\n        for (let i = 0; i < this.size; i++) {\n            this.cells[i].clear();\n        }\n    }\n\n    forEach(callback: CollisionGridForEachCallback) {\n        this.cells.forEach((cell, index) => {\n            const pos = this.makeVecFromIndex(index);\n            callback(pos.x, pos.y, cell, index);\n        })\n    }\n\n    hasCell(index, dt) {\n        if (index < 0 || index >= this.size) {\n            return false;\n        }\n\n        const pos = this.makeVecFromIndex(index);\n\n        const x = pos.x;\n        const y = pos.y;\n\n        if (y <= 0 && dt < 0) {\n            // TOP CELL\n            return false;\n        }\n\n        if (y === this.height - 1 && dt > 0) {\n            // Bottom cell\n            return  false;\n        }\n\n        if (x === 0 && dt < 0) {\n            // left cell\n            return false;\n        }\n\n        if (x >= this.width - 1 && dt > 0) {\n            // right cell;\n            return false;\n        }\n\n        return true;\n    }\n}\n","import {Vec2} from \"./vector/vec2\";\nimport {BallsObject} from \"./objects/ball\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Constrain} from \"./constrains/constrain\";\nimport {CollisionCell, CollisionGrid} from \"./grid\";\n\nexport class Solver {\n    objects: BaseSolverObject[] = []\n    constrains: Constrain = null;\n    gravity: Vec2 = Vec2.Zero();\n    subSteps: number = 4;\n    useFixedTime: boolean = true;\n    step: number;\n    collisionGrid: CollisionGrid;\n    worldSize: Vec2;\n\n    cellSize: Vec2;\n\n    constructor(worldSize) {\n        this.objects = [];\n        this.worldSize = worldSize.copy();\n\n        this.configure();\n    }\n\n    configure() {\n        this.gravity = new Vec2(0, 100);\n\n        this.useFixedTime = true;\n        this.step = 0.017 / this.subSteps;\n\n        const cellSize = 16;\n\n        const gridX = Math.round(this.worldSize.x / cellSize);\n        const gridY = Math.round(this.worldSize.y / cellSize);\n\n        this.cellSize = new Vec2(\n            this.worldSize.x / gridX,\n            this.worldSize.y / gridY\n        );\n\n        this.collisionGrid = new CollisionGrid(\n            gridX, gridY,\n            this.cellSize\n        )\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n    }\n\n    /**\n     * Update the simulation by given step.\n     * @param {number} time amount of seconds passed since last update.\n     */\n    update(time) {\n        const subTime = this.useFixedTime ? this.step : time / this.subSteps;\n        for (let i = 0; i < this.subSteps; i++) {\n            this.addObjectsToGrid();\n            this.processCollisions();\n            this.applyGravity();\n            this.updateObjects(subTime);\n            this.applyConstrains();\n        }\n    }\n\n    addObjectsToGrid() {\n        this.collisionGrid.clear();\n        this.objects.forEach((obj, index) => {\n            obj.addToGrid(this.collisionGrid);\n        });\n    }\n\n    /**\n     * Update objects state\n     * @param {number} time amount of seconds passed since last update\n     */\n    updateObjects(time) {\n        this.objects.forEach(obj => obj.update(time))\n    }\n\n    applyGravity() {\n        this.objects.forEach(obj => obj.accelerate(this.gravity))\n    }\n\n    applyConstrains() {\n        this.objects.forEach(obj => this.constrains.applyConstrain(obj))\n    }\n\n    processCollisionsInCell(objA: BaseSolverObject, cell: CollisionCell) {\n        cell.objects.forEach(objB => {\n            if (objA === objB) {\n                return;\n            }\n\n            if (objA.immovable && objB.immovable) {\n                return;\n            }\n\n            objA.collide(objB);\n        })\n    }\n\n    processCell(index: number) {\n        this.collisionGrid.cells[index].objects.forEach(objA => {\n            this.processCollisionsInCell(objA, this.collisionGrid.cells[index]); // SELF\n\n            if (this.collisionGrid.hasCell(index, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - 1]); // TOP\n            }\n\n            if (this.collisionGrid.hasCell(index, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + 1]); // BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height - 1]); // RIGHT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height]); // RIGHT\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height + 1]); // RIGHT BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height - 1]); // LEFT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height]); // LEFT\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height + 1]); // LEFT BOTTOM\n            }\n        })\n    }\n\n    processCollisions() {\n        for (let index = 0; index < this.collisionGrid.size; index++) {\n            this.processCell(index);\n        }\n    }\n}\n\nfunction makeKey(obj1, obj2) {\n    return [obj1.index, obj2.index].sort().join('-');\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Rect extends Item {\n    size = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, size, color) {\n        super(context, position);\n\n        this.size = size;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(\n            this.position.x,\n            this.position.y,\n            this.position.x + this.size.x,\n            this.position.y + this.size.y\n        )\n    }\n}","export class RenderableObject {\n    /**\n     * @type {BallsObject}\n     */\n    ballsObject = null;\n\n    /**\n     * @type {Item}\n     */\n    renderItem = null;\n\n    constructor(ballsObject, renderItem) {\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        this.renderItem.position = this.ballsObject.currentPosition;\n    }\n\n    render() {\n        this.update();\n        this.renderItem.render();\n    }\n}","import {BallsObject} from \"./ball\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\nimport {SQRT2} from \"../vector/math\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class ImmovableBallsObject extends BallsObject {\n    type = SolverObjectTypes.TypeImmovableBall;\n    immovable = true;\n    bounceValue = 0.5;\n\n    /**\n     * @type {Vec2}\n     * @private\n     */\n    _fixedPosition = null;\n\n    /**\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super(position, radius);\n        this._fixedPosition = position.copy();\n    }\n\n    update(step) {\n        this.currentPosition = this._fixedPosition;\n        this.previousPosition = this._fixedPosition;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        const vec = new Vec2(\n            this.radius * SQRT2,\n            this.radius * SQRT2\n        )\n\n        const leftTop = this.currentPosition.sum(vec);\n        const rightBottom = this.currentPosition.diff(vec);\n\n        collisionGrid.addObjectToCells(\n            leftTop,\n            rightBottom,\n            this\n        );\n    }\n}","import {RenderableObject} from \"./object\";\n\nexport class ImmovableLineRenderableObject extends RenderableObject {\n    /**\n     * @type {ImmovableLineObject}\n     */\n    ballsObject = null;\n\n    constructor(ballsObject, renderItem) {\n        super(ballsObject);\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        super.update();\n        this.renderItem.direction = this.ballsObject._direction;\n    }\n}","import { BallsObject } from \"./ball\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class ImmovableLineObject extends BallsObject {\n    _direction;\n    _line;\n\n    type = SolverObjectTypes.TypeImmovableLine;\n    immovable = true;\n\n    constructor(position, direction) {\n        super(position, 0);\n        this._direction = direction;\n\n        this._line = new Vec2Line(\n            this.currentPosition.copy(),\n            this.currentPosition.copy().sum(this._direction)\n        )\n    }\n\n    update(step) {\n        this.currentPosition = this._line._vec1;\n        this.previousPosition = this._line._vec2;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObjectToCells(\n            this._line._vec1,\n            this._line._vec2,\n            this\n        );\n    }\n\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Line extends Item {\n    direction = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, direction, color) {\n        super(context, position);\n\n        this.direction = direction;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.beginPath(); // Start a new path\n        this.context.moveTo(this.position.x, this.position.y);\n        this.context.lineTo(\n            this.position.x + this.direction.x,\n            this.position.y + this.direction.y\n        );\n        this.context.stroke(); // Render the path\n    }\n}","import {Circle} from \"./circle\";\n\nexport class CircleWithText extends Circle {\n    text = '';\n    textColor = '#ffffff';\n\n    constructor(context, position,r, color, text, textColor) {\n        super(context, position, r, color);\n        this.text = text;\n        if (textColor) {\n            this.textColor = textColor;\n        }\n    }\n\n    render() {\n        super.render();\n        this.context.fillStyle = this.textColor;\n        this.context.textBaseline = \"middle\";\n        this.context.textAlign = \"center\";\n        this.context.fillText(this.text, this.position.x, this.position.y);\n    }\n}","import {Rect} from \"./rect\";\n\nexport class Frame extends Rect {\n    constructor(context, position, size, color) {\n        super(context, position, size, color);\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.strokeRect(\n            this.position.x,\n            this.position.y,\n            this.size.x,\n            this.size.y\n        )\n    }\n\n    queue() {\n\n    }\n}","import {Circle} from \"./items/circle\";\nimport {Vec2} from \"./vector/vec2\";\nimport {Vec2Math} from \"./vector/vec2Math\";\nimport {BallsObject} from \"./objects/ball\";\nimport {ViewportConstrain} from \"./constrains/viewport\";\nimport {CircleConstrain} from \"./constrains/circle\";\nimport {MappedObjectGeneratorItem, MappedObjectsGenerator} from \"./mappedObjectsGenerator\";\nimport {TotalObjectsGenerator} from \"./totalObjectsGenerator\";\nimport {Solver} from \"./solver\";\nimport {Rect} from \"./items/rect\";\nimport {RenderableObject} from \"./renderableObjects/object\";\nimport {ImmovableBallsObject} from \"./objects/immovableBall\";\nimport {ImmovableLineRenderableObject} from \"./renderableObjects/immovableLine\";\nimport {ImmovableLineObject} from \"./objects/immovableLine\";\nimport {Line} from \"./items/line\";\nimport {CircleWithText} from \"./items/circleWithText\";\nimport {Frame} from \"./items/frame\";\n\nconst balls = [\n    new MappedObjectGeneratorItem(\n        1,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        2,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        3,\n        new BallsObject(new Vec2(10, 10))\n    ),\n]\n\nconst milkShakePoints = [\n    new Vec2(0, 0),\n    new Vec2(70, 380),\n    new Vec2(270, 380),\n    new Vec2(340, 0)\n]\n\nconst milkShakeLines = [\n    [milkShakePoints[0], Vec2Math.diff(milkShakePoints[0], milkShakePoints[1]).flipSelf()],\n    [milkShakePoints[1], Vec2Math.diff(milkShakePoints[1], milkShakePoints[2]).flipSelf()],\n    [milkShakePoints[2], Vec2Math.diff(milkShakePoints[2], milkShakePoints[3]).flipSelf()]\n]\n\nconst ballsColors = {\n    57: '#ffffff',\n    78: '#ffffff',\n    71: '#ffffff',\n    86: '#ffffff',\n    200: '#ffffff',\n    202: '#ffffff',\n    218: '#ffffff',\n}\n\nfunction index2color(index) {\n    const frequency=5/1000;\n    const r = Math.floor(Math.sin(frequency*index + 0) * (127) + 128);\n    const g = Math.floor(Math.sin(frequency*index + 2) * (127) + 128);\n    const b = Math.floor(Math.sin(frequency*index + 4) * (127) + 128);\n    return `rgba(${r}, ${g}, ${b}, 1)`;\n}\n\nexport class Render {\n    /**\n     * List of balls\n     * @type {RenderableObject[]}\n     */\n    objects = []\n\n    /**\n     * @type {Constrain}\n     */\n    constrains = null;\n\n    /**\n     * Solver for physics\n     * @type {Solver}\n     */\n    solver = null;\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.context = this.canvas.getContext(\"2d\");\n\n        this.timeRenderStart = performance.now();\n        this.timeRenderEnd = performance.now();\n        this.step = 0;\n\n        /**\n         * @type {RenderableObject[]}\n         */\n        this.objects = [];\n\n        this.items = [];\n\n        this.generator = null;\n        this.solver = null\n\n        this.redBall = null;\n\n        this.configure();\n    }\n\n    configure() {\n        this.solver = new Solver(\n            new Vec2(\n                this.canvas.width,\n                this.canvas.height\n            )\n        );\n\n        this.context.font = '10px serif';\n\n        //this.switchToCircleConstrain();\n        this.switchToViewportConstrain();\n        this.solver.constrains = this.constrains;\n\n        const canvasCenter = new Vec2(\n            this.canvas.width / 2,\n            this.canvas.height / 2\n        );\n\n        const ballGeneratorPoint = canvasCenter.diff(\n            new Vec2(\n                300,\n                300\n            )\n        )\n        const ballVelocity = new Vec2(\n            2, -2\n        ).mul(1/this.solver.subSteps);\n\n        this.generator = new TotalObjectsGenerator(\n            this.solver,\n            1000,\n            7,\n            (index) => {\n                const obj = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint,\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index+200),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                const obj2 = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint.sum(\n                            Vec2.Down(20)\n                        ),\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index+100),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                const obj3 = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint.sum(\n                            Vec2.Down(-20)\n                        ),\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        7,\n                        index2color(index),\n                        '',\n                        '#000000'\n                    )\n                )\n\n                return [obj,obj2, obj3];\n            }\n        );\n\n        this.redBall = new RenderableObject(\n            new ImmovableBallsObject(new Vec2(230, 50), 30),\n            new Circle(this.context, Vec2.Zero(), 30, '#ff0000')\n        );\n\n        this.addObject(this.redBall);\n\n        milkShakeLines.forEach(line => {\n            this.addObject(new ImmovableLineRenderableObject(\n                new ImmovableLineObject(\n                    line[0].sum(\n                        canvasCenter.diff(new Vec2(340/2, 380/2))\n                    ),\n                    line[1]\n                ),\n                new Line(\n                    this.context,\n                    Vec2.Zero(),\n                    Vec2.Zero(),\n                    '#ffffff'\n                )\n            ));\n        });\n    }\n\n    processUserInput(event) {\n        if (event.leftButtonDown) {\n            if (this.redBall.ballsObject.isPointInsideObject(\n                new Vec2(\n                    event.screenX,\n                    event.screenY\n                )\n            )) {\n                this.canMoveRedObject = true;\n            }\n\n            if (this.canMoveRedObject) {\n                this.redBall.ballsObject.moveBy(\n                    new Vec2(\n                        event.dx,\n                        event.dy\n                    )\n                )\n            }\n        } else {\n            this.canMoveRedObject = false;\n        }\n    }\n\n    /**\n     * @param {RenderableObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n        this.solver.addObject(obj.ballsObject);\n    }\n\n    update(time) {\n        this.solver.update(time);\n    }\n\n    generatorsTick(time) {\n        const newBalls = this.generator.getNextObject(time);\n        if (newBalls) {\n            newBalls.forEach(ball => this.addObject(ball));\n        }\n    }\n\n    tick() {\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.generatorsTick(this.step / 1000);\n        this.update(this.step / 1000);\n\n        this.clear();\n        this.renderItems();\n        //this.renderGrid();\n\n        this.printFPS();\n\n        Vec2.lengthCallsCount = 0;\n    }\n\n    nextFrame = (time) => {\n        this.step = time - this.timeRenderEnd;\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = time;\n        self.requestAnimationFrame(this.nextFrame);\n    }\n\n    nextInterval = () => {\n        this.timeRenderStart = performance.now()\n        this.step = this.timeRenderStart - this.timeRenderEnd;\n\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = performance.now();\n    }\n\n    renderItems() {\n        this.items.forEach(item => item.render());\n        this.objects.forEach(obj => obj.render());\n    }\n\n    printText(text, x, y) {\n        this.context.fillStyle = \"#ffffff\";\n        this.context.textAlign = \"start\";\n        this.context.fillText(text, x, y);\n    }\n\n    printFPS() {\n        this.context.fillStyle = 'rgba(0,0,0,0.1)';\n        this.context.fillRect(0, 0, 100, 60);\n        this.printText(`${Math.round(this.step)} ms / ${Math.round(1000/this.step)} FPS`, 0, 10);\n        this.printText(`Length calls: ${Vec2.lengthCallsCount}`, 0 , 20);\n        this.printText(`Lenght2 calls: ${Vec2.length2CallsCount}`, 0 , 30);\n        this.printText(`Objects: ${this.objects.length}`, 0, 40);\n        this.printText(`Compares per object: ${Math.round(Vec2.lengthCallsCount / this.objects.length)}`, 0, 50);\n    }\n\n    clear() {\n        this.context.fillStyle = \"rgba(0, 0, 0, 0.9)\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    }\n\n    start() {\n        if (self.requestAnimationFrame) {\n            self.requestAnimationFrame(this.nextFrame);\n        } else {\n            setInterval(this.nextInterval, 16)\n        }\n    }\n\n    renderGrid() {\n        this.solver.collisionGrid.forEach((column, row, cell, index) => {\n            const cellPosition = new Vec2(\n                column * this.solver.cellSize.x,\n                row * this.solver.cellSize.y,\n            );\n            const rect = new Frame(\n                this.context,\n                cellPosition,\n                this.solver.cellSize.diff(new Vec2(5, 5)),\n                cell.count > 0 ? '#ff0000' : '#00ff00'\n            )\n\n            if (cell.highlight) {\n                this.context.lineWidth = 10;\n            }\n\n            rect.render();\n\n            this.context.lineWidth = 1;\n            this.printText(\n                index,\n                cellPosition.x + this.solver.cellSize.x / 2,\n                cellPosition.y + this.solver.cellSize.y / 2\n            )\n        })\n    }\n\n    switchToCircleConstrain() {\n        this.constrains = new CircleConstrain(\n            new Vec2(this.canvas.width / 2, this.canvas.height / 2),\n            this.canvas.height / 2\n        )\n\n        this.items.push(\n            new Circle(\n                this.context,\n                this.canvas.width / 2,\n                this.canvas.height / 2,\n                this.canvas.height / 2,\n                '#000000'\n            )\n        );\n    }\n\n    switchToViewportConstrain() {\n        this.constrains = new ViewportConstrain(this.canvas.width, this.canvas.height)\n        // this.items.push(\n        //     new Rect(\n        //         this.context,\n        //         Vec2.Zero(),\n        //         new Vec2(\n        //             this.canvas.width,\n        //             this.canvas.height\n        //         ),\n        //         '#000000'\n        //     )\n        // );\n    }\n}","export enum MessageType {\n    MessageNone = 0,\n    MessageInit = 1,\n    MessageUserInput = 2\n}\n\nexport class MessageEvent {\n    type = MessageType.MessageNone;\n}\n\nexport class MessageInit extends MessageEvent {\n    type = MessageType.MessageInit;\n    canvas;\n\n    constructor(canvas) {\n        super();\n        this.canvas = canvas;\n    }\n}\n\nexport class MessageUserInput extends MessageEvent {\n    type = MessageType.MessageUserInput;\n    event;\n\n    constructor(event) {\n        super();\n        this.event = event;\n    }\n}\n","import { Render } from \"../render/index\";\nimport { MessageType } from \"../host/messages\";\n\nlet render;\n\nonmessage = function (event ) {\n    switch (event.data.type) {\n        case MessageType.MessageInit:\n            render = new Render(event.data.canvas);\n            render.start();\n            break;\n        case MessageType.MessageUserInput:\n            if (render) {\n                render.processUserInput(event.data.event);\n            }\n            break;\n    }\n}"],"names":["$455213ab5977fa62$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$8406e33aac2f91a3$export$79992de41895b472","_super","Vec2Exception","$8406e33aac2f91a3$var$__extends","Error","$8406e33aac2f91a3$export$98e05f023e6bbbeb","Vec2ExceptionParallel","$8406e33aac2f91a3$export$cc5bbfba1d12de75","Vec2ExceptionNoPerpendicularVectorToZeroVector","$9bb13d9893393ebf$export$92b0492af2e4b152","Vec2Math","diff","vec1","vec2","$95ac3a1ed301eb96$export$ac4bca90992eed1","x","y","mul","scalar","distance","length","distance2","length2","intersect","line1","line2","K","$8406e33aac2f91a3$exports","isNaN","makeVec2FromX","_vec1","B","dot","mirror","vec","line","normal","direction","perpendicular","scale","$0290eafc4a2194f2$export$9201df218db36553","$0290eafc4a2194f2$export$3681641e15b6e2c3","Math","sqrt","Vec2","l","this","_x","_y","_length","_length2","prototype","get","set","lengthCallsCount","length2CallsCount","addSelf","subSelf","flipYSelf","flipXSelf","flipSelf","equals","sum","copy","applySelf","callback","Horizontal","ort","Vertical","Zero","Down","Right","$4617e5f5b8d500e2$export$6d08773d2e66f8f2","render","queue","constructor","context","position","$143ee38cf3bec427$export$c89a927ffc67e6fa","beginPath","arc","r","PI","fillStyle","color","fill","super","$b8550ff384eed3f7$export$a59432db1b5f15cd","SolverObjectTypes","$48de740a4f343d29$export$769818a274da100a","Vec2Line","_vec2","_k","_b","_direction","_ort","calculateKB","inBetween","a","b","error","abs","NaN","moveBy","getPointProjection","cosabD","Number","MAX_SAFE_INTEGER","$93a740b8e1cfed7d$export$98e6d07575f46913","obj1","obj2","type","flipped","$93a740b8e1cfed7d$var$flipObjects","TypeBall","between","currentPosition","requiredDistance","radius","normalized","delta","bounceValue","$93a740b8e1cfed7d$export$23e74c69ee7b6dae","TypeImmovableBall","ball","immovable","$93a740b8e1cfed7d$export$6d6f4258faab0992","TypeImmovableLine","projectionPoint","_line","e","$93a740b8e1cfed7d$export$4d790f09e0e06cd9","$d20e88db5ee80a18$export$8387ea1f2c3d2dbf","BaseSolverObject","TypeNull","previousPosition","index","update","step","accelerate","acc","collide","addToGrid","collisionGrid","$d3eefd188eb9c490$export$e4134913c977dac4","BallsObject","_this","call","undefined","$d3eefd188eb9c490$var$__extends","velocity","setVelocity","vel","addObject","floor","isPointInsideObject","point","v","$b152758d9af9f18b$export$504c072c1a75a697","applyConstrain","$e5deb4c997d86649$export$29fb847bec292dd0","width","_width","height","_height","$0cde6a08871d2110$export$4384cf344d141b50","toCenter","center","n","$f03645509a0a5725$export$780b62e628ec518f","getNextObject","solver","$057f5faed6298d51$export$cf86583e2e1a386b","timeout","object","$4e27416e632cb8f4$export$a16316d22a718d27","total","limit","lastCreateTime","delay","newItems","create","count","createCallback","$53d7ba9907e0799d$export$e172ac46f8971d96","CollisionCell","objects","highlight","MAX_OBJECT_IN_CELL","push","clear","remove","objectIndex","findIndex","splice","$53d7ba9907e0799d$export$82d945040ef2d6e1","CollisionGrid","cellSize","cells","resize","_size","w","h","i","worldX","worldY","addObjectByIndex","size","makeIndexFromVec","makeIndexFromCoord","makeVecFromIndex","addObjectToCells","worldLeftTop","worldRightBottom","point1","point2","index1","index2","cellIndex","left","min","top","right","max","startFrom","forEach","cell","pos","hasCell","dt","$5d0d168355dd42cc$export$cca492cadf45c096","Solver","worldSize","constrains","gravity","subSteps","useFixedTime","configure","gridX","round","gridY","time","subTime","addObjectsToGrid","processCollisions","applyGravity","updateObjects","applyConstrains","processCollisionsInCell","objA","objB","processCell","$2c1a4895804b6108$export$c79fc6492f3af13d","fillRect","$e0645bb325b1483a$export$c682e94218fd2425","renderItem","ballsObject","$c299634f6792026f$export$231acc6c5e36d927","ImmovableBallsObject","_fixedPosition","$c299634f6792026f$var$__extends","leftTop","rightBottom","$d3eefd188eb9c490$exports","$dc60d3072d13f390$export$d17c9f1e24f0afb0","$e0e237660db08ec2$export$35284351ee95db01","ImmovableLineObject","$e0e237660db08ec2$var$__extends","$4a6bc97734791e07$export$17d680238e50603e","strokeStyle","moveTo","lineTo","stroke","$01802125d5e03a9c$export$d56a2681f508d897","textColor","textBaseline","textAlign","fillText","text","$7c30461bbbff0ab9$export$b89a827e9254211a","strokeRect","$9f255293c67779ce$var$milkShakePoints","$9f255293c67779ce$var$milkShakeLines","$9f255293c67779ce$var$index2color","frequency","sin","$9f255293c67779ce$export$160ae30d75f98247","canvas","font","switchToViewportConstrain","canvasCenter","ballGeneratorPoint","ballVelocity","generator","redBall","$c299634f6792026f$exports","$e0e237660db08ec2$exports","processUserInput","event","leftButtonDown","screenX","screenY","canMoveRedObject","dx","dy","generatorsTick","newBalls","tick","renderItems","printFPS","items","item","printText","start","self","requestAnimationFrame","nextFrame","setInterval","nextInterval","renderGrid","column","row","cellPosition","rect","lineWidth","switchToCircleConstrain","timeRenderEnd","timeRenderStart","performance","now","getContext","$2016cc7919e0701a$export$80edbf15fa61a4db","MessageType","$ff44e9c89def7e51$var$render","$2016cc7919e0701a$export$fbae1a0d0e7e2437","MessageNone","MessageInit","$2016cc7919e0701a$var$__extends","MessageUserInput","onmessage","data","$2016cc7919e0701a$exports"],"version":3,"file":"main.6f291b2b.js.map"}