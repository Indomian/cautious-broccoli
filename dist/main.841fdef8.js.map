{"mappings":"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","sources":["node_modules/@swc/helpers/src/_define_property.mjs","src/render/item.js","src/render/circle.js","src/render/vec2.js","src/render/object.js","src/render/constrain.js","src/render/viewportConstrain.js","src/render/circleConstrain.js","src/render/objectsGenerator.js","src/render/mappedObjectsGenerator.js","src/render/totalObjectsGenerator.js","src/render/solver.js","src/render/rect.js","src/render/index.js","src/worker/main.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export class Item {\n    /**\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    constructor(context) {\n        this.context = context;\n    }\n\n    render() {\n\n    }\n}","import {Item} from \"./item\";\n\nexport class Circle extends Item {\n    x = 0;\n    y = 0;\n    r = 0;\n    color = '#00ff00';\n\n    constructor(context, x, y, r, color) {\n        super(context);\n\n        this.x = x;\n        this.y = y;\n        this.r = r;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.beginPath()\n        this.context.arc(\n            this.x,\n            this.y,\n            this.r,\n            0,\n            2 * Math.PI\n        )\n\n        this.context.fillStyle = this.color;\n        this.context.fill();\n    }\n}","export const MATH_ERROR = 0.000001;\n\nexport function isEqual(a, b, error) {\n    return Math.abs(a - b) < error;\n}\n\nexport class NoPerpendicularVectorToZeroVector extends Error {}\n\nexport class Vec2 {\n    x = 0;\n    y = 0;\n\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Adds vec2 to current vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    add(vec2) {\n        this.x += vec2.x;\n        this.y += vec2.y;\n        return this;\n    }\n\n    /**\n     * Subtract from current vector given vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    sub(vec2) {\n        this.x -= vec2.x;\n        this.y -= vec2.y;\n        return this;\n    }\n\n    /**\n     * Flips along X axis\n     * @returns {Vec2}\n     */\n    flipY() {\n        this.y = -this.y;\n        return this;\n    }\n\n    /**\n     * Flips along Y axis\n     * @returns {Vec2}\n     */\n    flipX() {\n        this.x = -this.x;\n        return this;\n    }\n\n    flip() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    /**\n     * Checks if this vector equals given vector using global MATH_ERROR const\n     * @param vec2\n     */\n    equals(vec2) {\n        return Vec2Math.distance(this, vec2) < MATH_ERROR;\n    }\n\n    /**\n     * Sums current vector and given vector and returns new vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    sum(vec2) {\n        return new Vec2(this.x + vec2.x, this.y + vec2.y);\n    }\n\n    /**\n     * Calculate difference between current vector and given vector and returns\n     * new vector\n     *\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    diff(vec2) {\n        return new Vec2(this.x - vec2.x, this.y - vec2.y);\n    }\n\n    /**\n     * Multiplicates vector by numner\n     * @param {number} value\n     * @returns {Vec2}\n     */\n    mul(value) {\n        return new Vec2(this.x * value, this.y * value);\n    }\n\n    copy() {\n        return new Vec2(this.x, this.y);\n    }\n\n    get length() {\n        return Math.sqrt(this.x*this.x + this.y*this.y);\n    }\n\n    /**\n     * Returns normalized vector\n     * @returns {Vec2}\n     */\n    get normalized() {\n        const l = this.length;\n        return new Vec2(this.x / l, this.y / l);\n    }\n\n    get perpendicular() {\n        if (this.x === 0) {\n            // Vertical\n            if (this.y > 0) {\n                return Vec2.Horizontal().normalized\n            } else if (this.y < 0) {\n                return Vec2.Horizontal().normalized.flip();\n            } else {\n                throw new NoPerpendicularVectorToZeroVector();\n            }\n        } else if (this.y === 0) {\n            // Horizontal\n            if (this.x > 0) {\n                return Vec2.Vertical().normalized\n            } else if (this.x < 0) {\n                return Vec2.Vertical().normalized.flip();\n            }\n        }\n\n        return new Vec2(\n            -this.y / this.x,\n            1\n        ).normalized;\n    }\n\n    static Zero() {\n        return new Vec2(0, 0);\n    }\n\n    static Horizontal() {\n        return new Vec2(1, 0);\n    }\n\n    static Vertical() {\n        return new Vec2(0, 1);\n    }\n}\n\nexport class Vec2Line {\n    vec1 = Vec2.Zero();\n    vec2 = Vec2.Zero();\n\n    /**\n     * Y = K*X + B\n     * @type {number}\n     */\n    k = 0;\n    b = 0;\n\n    constructor(vec1, vec2) {\n        this.vec1 = vec1;\n        this.vec2 = vec2;\n\n        this.calculateKB();\n    }\n\n    /**\n     * Determines if given point lays on the line\n     * @param vec\n     * @returns {boolean}\n     */\n    inBetween(vec) {\n        const l1 = Vec2Math.diff(vec, this.vec1).length;\n        const l2 = Vec2Math.diff(this.vec2, vec).length;\n        const l = Vec2Math.diff(this.vec1, this.vec2).length;\n        return isEqual(l, l1 + l2, MATH_ERROR);\n    }\n\n    calculateKB() {\n        if (this.vec1.y === this.vec2.y) {\n            // Horizontal line\n            this.b = this.vec1.y;\n            this.k = 0;\n        } else if (this.vec1.x === this.vec2.x) {\n            // Vertical line\n            this.b = NaN;\n            this.k = NaN;\n        } else {\n            this.b = (this.vec1.x * this.vec2.y - this.vec1.y * this.vec2.x) / (this.vec1.x - this.vec2.x)\n            this.k = (this.vec1.y - this.vec2.y) / (this.vec1.x - this.vec2.x);\n        }\n    }\n\n    makeVec2FromX(x) {\n        return new Vec2(x, this.k * x + this.b);\n    }\n\n    get B() {\n        return this.b;\n    }\n\n    get K() {\n        return this.k;\n    }\n\n    get length() {\n        return Vec2Math.distance(this.vec1, this.vec2);\n    }\n\n    get direction() {\n        return Vec2Math.diff(this.vec1, this.vec2);\n    }\n\n    static Vertical(x) {\n        return new Vec2Line(\n            new Vec2(x, 0),\n            new Vec2(x, Number.MAX_SAFE_INTEGER)\n        )\n    }\n\n    static Horizontal(y) {\n        return new Vec2Line(\n            new Vec2(0, y),\n            new Vec2(Number.MAX_SAFE_INTEGER, y)\n        )\n    }\n}\n\nexport class ExceptionParallel extends Error {}\n\nexport class Vec2Math {\n    static diff(vec1, vec2) {\n        return new Vec2(vec1.x - vec2.x, vec1.y - vec2.y);\n    }\n\n    static mul(vec1, scalar) {\n        return new Vec2(vec1.x * scalar, vec1.y * scalar);\n    }\n\n    /**\n     * Calculates distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance(vec1, vec2) {\n        return Vec2Math.diff(vec1, vec2).length;\n    }\n\n    /**\n     * Finds intersection between 2 lines\n     * @param {Vec2Line} line1\n     * @param {Vec2Line} line2\n     * @returns {Vec2}\n     */\n    static intersect(line1, line2) {\n        if (line1.K === line2.K) {\n            throw new ExceptionParallel()\n        }\n\n        if (isNaN(line1.K) || isNaN(line2.K)) {\n            // One of two lines is vertical\n            if (isNaN(line1.K)) {\n                return line2.makeVec2FromX(line1.vec1.x);\n            } else {\n                return line1.makeVec2FromX(line2.vec1.x);\n            }\n        } else {\n            const x = (line1.B - line2.B) / (line2.K - line1.K);\n            return line1.makeVec2FromX(x);\n        }\n    }\n\n    /**\n     * Dot product of 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static dot(vec1, vec2) {\n        return vec1.x * vec2.x + vec1.y * vec2.y;\n    }\n\n    /**\n     *\n     * @param {Vec2} vec\n     * @param {Vec2Line} line\n     * @returns {Vec2}\n     */\n    static mirror(vec, line) {\n        const normal = line.direction.perpendicular.normalized;\n        return vec.copy().sub(\n            normal.mul(2 * Vec2Math.dot(vec, normal))\n        );\n    }\n}\n","import {Vec2, Vec2Line, Vec2Math} from \"./vec2\";\n\nexport class BallsObject {\n    previousPosition = Vec2.Zero();\n    currentPosition = Vec2.Zero();\n\n    acc = Vec2.Zero();\n\n    radius = 10;\n    bounceValue = 1.1;\n\n    /**\n     * Creates balls object\n     * @param {Vec2} position\n     */\n    constructor(position) {\n        this.previousPosition = position;\n        this.currentPosition = position;\n    }\n\n    /**\n     * Updates state of object\n     * @param {number} step\n     */\n    update(step) {\n        const velocity = this.velocity;\n        this.previousPosition = this.currentPosition.copy();\n        this.currentPosition.add(\n            velocity.add(\n                this.acc.mul(step * step)\n            )\n        )\n        this.acc = Vec2.Zero();\n    }\n\n    accelerate(acc) {\n        this.acc.add(acc);\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    collide(obj) {\n        const between = Vec2Math.diff(this.currentPosition, obj.currentPosition);\n        const distance = between.length;\n        const requiredDistance = this.radius + obj.radius;\n\n        if (distance < this.radius + obj.radius) {\n            const normalized = between.normalized;\n            const delta = requiredDistance - distance;\n            this.currentPosition.add(Vec2Math.mul(normalized, this.radius / requiredDistance * delta * this.bounceValue));\n            obj.currentPosition.sub(Vec2Math.mul(normalized, obj.radius / requiredDistance * delta * obj.bounceValue))\n        }\n    }\n\n    flip() {\n        const position = this.currentPosition.copy();\n        this.currentPosition = this.previousPosition;\n        this.previousPosition = position;\n    }\n\n    get velocity() {\n        return Vec2Math.diff(\n            this.currentPosition,\n            this.previousPosition\n        );\n    }\n\n    set velocity(v) {\n        this.previousPosition = Vec2Math.diff(this.currentPosition,v);\n    }\n\n    /**\n     *\n     * @returns {Vec2Line}\n     */\n    get movementVector() {\n        return new Vec2Line(this.previousPosition, this.currentPosition);\n    }\n}","export class Constrain {\n    constructor() {\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    applyConstrain(obj) {\n\n    }\n}","import {Constrain} from \"./constrain\";\nimport {Vec2, Vec2Line, Vec2Math} from \"./vec2\";\n\nexport class ViewportConstrain extends Constrain {\n    _width = 0;\n    _height = 0;\n    left = Vec2Line.Vertical(0);\n    top = Vec2Line.Horizontal(0);\n\n    right = Vec2Line.Vertical(0);\n    bottom = Vec2Line.Horizontal(0);\n\n    constructor(width, height) {\n        super()\n        this.width = width;\n        this.height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    set width(width) {\n        this._width = width;\n        this.recalculateSides();\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set height(height) {\n        this._height = height;\n        this.recalculateSides();\n    }\n\n    recalculateSides() {\n        this.top = new Vec2Line(\n            new Vec2(this._width, 0),\n            new Vec2(0, 0)\n        );\n        this.right = new Vec2Line(\n            new Vec2(this._width, 0),\n            new Vec2(this._width, this._height)\n        );\n        this.bottom = new Vec2Line(\n            new Vec2(0, this._height),\n            new Vec2(this._width, this._height)\n\n        );\n        this.left = new Vec2Line(\n            new Vec2(0, this._height),\n            new Vec2(0, 0)\n        );\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        this.checkConstrainWithSide(obj, this.right)\n        this.checkConstrainWithSide(obj, this.left)\n        this.checkConstrainWithSide(obj, this.bottom)\n        this.checkConstrainWithSide(obj, this.top)\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     * @param {Vec2Line} side\n     */\n    checkConstrainWithSide(obj, side) {\n        const velocity = obj.velocity;\n        const movementVector = obj.movementVector;\n        const direction = velocity.copy().flip();\n\n        try {\n            const intersectionPoint = Vec2Math.intersect(\n                side,\n                movementVector\n            );\n\n            const distance = Vec2Math.distance(intersectionPoint, obj.currentPosition);\n            if (distance < obj.radius) {\n                console.log(distance)\n                const normal = side.direction.perpendicular.normalized;\n                console.log(intersectionPoint, normal)\n                obj.currentPosition = intersectionPoint.sum(normal.mul(obj.radius * obj.bounceValue))\n                console.log(obj.currentPosition)\n            }\n        } catch (e) {\n            // Movement is parallel with given side\n        }\n    }\n\n}","import {Constrain} from \"./constrain\";\nimport {Vec2} from \"./vec2\";\n\nexport class CircleConstrain extends Constrain {\n    /**\n     *\n     * @type {Vec2}\n     */\n    center = Vec2.Zero();\n\n    radius = 0;\n\n    constructor(center, radius) {\n        super();\n\n        this.center = center;\n        this.radius = radius;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        const toCenter = obj.currentPosition.diff(this.center);\n        const distance = toCenter.length;\n        const r = obj.radius;\n\n        if (distance > (this.radius - r)) {\n            const n = toCenter.normalized;\n            obj.currentPosition = this.center.sum(\n                n.mul(this.radius - r)\n            );\n        }\n    }\n\n}","export class ObjectsGenerator {\n    solver = null;\n    constructor(solver) {\n        this.solver = solver;\n    }\n\n    // TODO Make me iterator\n    getNextObject(step) {\n        return null;\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\n\nexport class MappedObjectGeneratorItem {\n    /**\n     * Delay before object appear\n     * @type {number}\n     */\n    timeout;\n\n    /**\n     * Object configuration\n     * @type {BallsObject}\n     */\n    object;\n\n    constructor(timeout, object) {\n        this.timeout = timeout;\n        this.object = object;\n    }\n\n}\n\nexport class MappedObjectsGenerator extends ObjectsGenerator {\n    /**\n     * @param {MappedObjectGeneratorItem[]} map\n     */\n    constructor(solver, map) {\n        super(solver);\n\n        this.items = map;\n        this.currentTime = 0;\n    }\n\n    getNextObject(step) {\n        this.currentTime += step;\n\n        console.log(this.currentTime)\n\n        const index = this.items.findIndex((item) => item.timeout < this.currentTime);\n        if (index > -1) {\n            return this.items.splice(index, 1)[0].object;\n        }\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\nexport class TotalObjectsGenerator extends ObjectsGenerator {\n    constructor(solver, count, delay, createCallback) {\n        super(solver);\n        this.limit = count;\n        this.total = 0;\n\n        this.delay = delay;\n        this.create = createCallback;\n        this.lastCreateTime = 0;\n    }\n\n    getNextObject(step) {\n        if (this.total > this.limit) {\n            return;\n        }\n\n        this.lastCreateTime += step;\n        if (this.lastCreateTime > this.delay) {\n            const newItem = this.create();\n            this.lastCreateTime = 0;\n            this.total++;\n\n            return newItem;\n        }\n    }\n}","import {Vec2} from \"./vec2\";\nimport {BallsObject} from \"./object\";\n\nexport class Solver {\n    /**\n     * List of balls\n     * @type {BallsObject[]}\n     */\n    objects = []\n\n    /**\n     * @type {Constrain}\n     */\n    constrains = null;\n\n    constructor() {\n        this.gravity = Vec2.Zero();\n\n        this.objects = [];\n\n        this.subSteps = 8;\n\n        this.configure();\n    }\n\n    configure() {\n        this.gravity = new Vec2(0, 100);\n    }\n\n    /**\n     * Update the simulation by given step.\n     * @param {number} time amount of seconds passed since last update.\n     */\n    update(time) {\n        const subTime = time / this.subSteps;\n        for (let i = 0; i < this.subSteps; i++) {\n            this.applyGravity();\n            this.applyConstrains();\n            this.processCollisions();\n            this.updateObjects(subTime);\n        }\n    }\n\n    /**\n     * Update objects state\n     * @param {number} time amount of seconds passed since last update\n     */\n    updateObjects(time) {\n        this.objects.forEach(obj => obj.update(time))\n    }\n\n    applyGravity() {\n        this.objects.forEach(obj => obj.accelerate(this.gravity))\n    }\n\n    applyConstrains() {\n        this.objects.forEach(obj => this.constrains.applyConstrain(obj))\n    }\n\n    processCollisions() {\n        this.objects.forEach(objA => {\n            this.objects.forEach(objB => {\n                if (objA === objB) {\n                    return;\n                }\n\n                objA.collide(objB);\n            })\n        })\n    }\n}","import {Item} from \"./item\";\nimport {Vec2} from \"./vec2\";\n\nexport class Rect extends Item {\n    leftTop = Vec2.Zero();\n    size = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, leftTop, size, color) {\n        super(context);\n\n        this.leftTop = leftTop;\n        this.size = size;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(\n            this.leftTop.x,\n            this.leftTop.y,\n            this.size.x,\n            this.size.y\n        )\n    }\n}","import {Circle} from \"./circle\";\nimport {Vec2} from \"./vec2\";\nimport {BallsObject} from \"./object\";\nimport {ViewportConstrain} from \"./viewportConstrain\";\nimport {CircleConstrain} from \"./circleConstrain\";\nimport {Velocity} from \"./velocity\";\nimport {MappedObjectGeneratorItem, MappedObjectsGenerator} from \"./mappedObjectsGenerator\";\nimport {TotalObjectsGenerator} from \"./totalObjectsGenerator\";\nimport {Solver} from \"./solver\";\nimport {Rect} from \"./rect\";\n\nconst balls = [\n    new MappedObjectGeneratorItem(\n        1,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        2,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        3,\n        new BallsObject(new Vec2(10, 10))\n    ),\n]\n\nexport class Render {\n    /**\n     * List of balls\n     * @type {BallsObject[]}\n     */\n    objects = []\n\n    /**\n     * @type {Constrain}\n     */\n    constrains = null;\n\n    /**\n     * Solver for physics\n     * @type {Solver}\n     */\n    solver = null;\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.context = this.canvas.getContext(\"2d\");\n\n        this.timeRenderStart = performance.now();\n        this.timeRenderEnd = performance.now();\n        this.step = 0;\n\n        this.items = [];\n\n        this.generator = null;\n        this.solver = null;\n\n        this.configure();\n    }\n\n    configure() {\n        this.solver = new Solver();\n\n        this.context.font = '10px serif';\n\n        this.switchToCircleConstrain();\n        //this.switchToViewportConstrain();\n        this.solver.constrains = this.constrains;\n\n        this.generator = new TotalObjectsGenerator(\n            this.solver,\n            100,\n            0.2,\n            () => {\n            const ball = new BallsObject(\n                new Vec2(\n                    this.canvas.width / 2,\n                    this.canvas.height / 2\n                )\n            );\n            ball.velocity = new Vec2(\n                3,\n                -0.5\n            ).mul(1/this.solver.subSteps);\n            return ball;\n        })\n    }\n\n    update(time) {\n        const newBall = this.generator.getNextObject(time);\n        if (newBall) {\n            this.solver.objects.push(newBall);\n        }\n\n        this.solver.update(time);\n    }\n\n    tick() {\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.update(this.step / 1000);\n\n        this.clear();\n        this.renderItems();\n\n        this.printFPS();\n    }\n\n    nextFrame = (time) => {\n        this.step = time - this.timeRenderEnd;\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = time;\n        self.requestAnimationFrame(this.nextFrame);\n    }\n\n    nextInterval = () => {\n        this.timeRenderStart = performance.now()\n        this.step = this.timeRenderStart - this.timeRenderEnd;\n\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = performance.now();\n    }\n\n    renderItems() {\n        this.items.forEach(item => item.render());\n\n        this.solver.objects.forEach(obj => {\n            const img = new Circle(\n                this.context,\n                obj.currentPosition.x,\n                obj.currentPosition.y,\n                obj.radius\n            );\n            img.render();\n\n            // this.context.strokeStyle = '#0000ff';\n            // this.context.beginPath();\n            // this.context.moveTo(obj.previousPosition.x, obj.previousPosition.y);\n            // this.context.lineTo(obj.currentPosition.x, obj.currentPosition.y);\n            // this.context.stroke();\n        })\n    }\n\n    printText(text, x, y) {\n        this.context.fillStyle = \"#000000\";\n        this.context.fillText(text, x, y);\n    }\n\n    printFPS() {\n        this.printText(`${Math.round(this.step)} ms / ${Math.round(1000/this.step)} FPS`, 0, 10);\n    }\n\n    clear() {\n        this.context.fillStyle = \"#ffffff\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    }\n\n    start() {\n        if (self.requestAnimationFrame) {\n            self.requestAnimationFrame(this.nextFrame);\n        } else {\n            setInterval(this.nextInterval, 16)\n        }\n    }\n\n    switchToCircleConstrain() {\n        this.constrains = new CircleConstrain(\n            new Vec2(this.canvas.width / 2, this.canvas.height / 2),\n            this.canvas.height / 2\n        )\n\n        this.items.push(\n            new Circle(\n                this.context,\n                this.canvas.width / 2,\n                this.canvas.height / 2,\n                this.canvas.height / 2,\n                '#000000'\n            )\n        );\n    }\n\n    switchToViewportConstrain() {\n        this.constrains = new ViewportConstrain(this.canvas.width, this.canvas.height)\n        this.items.push(\n            new Rect(\n                this.context,\n                Vec2.Zero(),\n                new Vec2(\n                    this.canvas.width,\n                    this.canvas.height\n                ),\n                '#000000'\n            )\n        );\n    }\n}","import { Render } from \"../render/index.js\";\n\nonmessage = function (event ) {\n    console.log(event);\n\n    const render = new Render(event.data.canvas);\n    render.start();\n}"],"names":["$455213ab5977fa62$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$0ae62d2753f44917$export$6d08773d2e66f8f2","render","constructor","context","this","$9991a46738256265$export$c89a927ffc67e6fa","beginPath","arc","x","y","r","Math","PI","fillStyle","color","fill","super","$b63c9c0c5bf74f3a$export$9201df218db36553","$b63c9c0c5bf74f3a$export$ea4075d7085bb1f7","Error","$b63c9c0c5bf74f3a$export$ac4bca90992eed1","add","vec2","sub","flipY","flipX","flip","equals","$b63c9c0c5bf74f3a$export$92b0492af2e4b152","distance","sum","diff","mul","copy","length","sqrt","normalized","l","perpendicular","Horizontal","Vertical","static","$b63c9c0c5bf74f3a$export$769818a274da100a","inBetween","vec","l1","vec1","l2","a","b","error","abs","calculateKB","k","NaN","makeVec2FromX","B","K","direction","Number","MAX_SAFE_INTEGER","Zero","$b63c9c0c5bf74f3a$export$dd10cb6db43ac275","scalar","line1","line2","isNaN","line","normal","dot","$4e4d173b7a53b545$export$e4134913c977dac4","update","step","velocity","previousPosition","currentPosition","acc","accelerate","collide","between","requiredDistance","radius","delta","bounceValue","position","v","movementVector","$c7391f2fe7be5bf0$export$504c072c1a75a697","applyConstrain","$f61d9b2a2d5ca271$export$29fb847bec292dd0","width","_width","recalculateSides","height","_height","top","right","bottom","left","checkConstrainWithSide","side","intersectionPoint","intersect","console","log","e","$dd192b23ff9ad44c$export$4384cf344d141b50","toCenter","center","n","$f03645509a0a5725$export$780b62e628ec518f","getNextObject","solver","$057f5faed6298d51$export$cf86583e2e1a386b","timeout","object","$4e27416e632cb8f4$export$a16316d22a718d27","total","limit","lastCreateTime","delay","newItem","create","count","createCallback","$c3942e741d9d1fae$export$cca492cadf45c096","configure","gravity","time","subTime","subSteps","i","applyGravity","applyConstrains","processCollisions","updateObjects","objects","forEach","constrains","objA","objB","$f0ec6a586c9eb64a$export$c79fc6492f3af13d","fillRect","leftTop","size","$9f255293c67779ce$export$160ae30d75f98247","font","switchToCircleConstrain","generator","ball","canvas","newBall","push","tick","clear","renderItems","printFPS","items","item","printText","text","fillText","round","start","self","requestAnimationFrame","nextFrame","setInterval","nextInterval","switchToViewportConstrain","timeRenderEnd","timeRenderStart","performance","now","getContext","onmessage","event","data"],"version":3,"file":"main.841fdef8.js.map"}