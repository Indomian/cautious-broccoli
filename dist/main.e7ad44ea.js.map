{"mappings":"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","sources":["node_modules/@swc/helpers/src/_define_property.mjs","src/render/vector/exceptions.ts","src/render/vector/vec2Math.ts","src/render/vector/math.ts","src/render/vector/vec2.ts","src/render/items/item.js","src/render/items/circle.js","src/render/vector/vec2Line.ts","src/render/objects/types.ts","src/render/objects/collisionModels.js","src/render/objects/object.ts","src/render/objects/ball.ts","src/render/constrains/constrain.js","src/render/constrains/viewport.js","src/render/constrains/circle.js","src/render/objectsGenerator.js","src/render/mappedObjectsGenerator.js","src/render/totalObjectsGenerator.js","src/render/grid.ts","src/render/solver.ts","src/render/items/rect.js","src/render/renderableObjects/object.js","src/render/objects/immovableBall.ts","src/render/renderableObjects/immovableLine.js","src/render/objects/immovableLine.ts","src/render/items/line.js","src/render/items/circleWithText.js","src/render/items/frame.js","src/render/index.js","src/worker/main.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export class Vec2Exception extends Error {}\n\nexport class Vec2ExceptionParallel extends Vec2Exception {}\nexport class Vec2ExceptionNoPerpendicularVectorToZeroVector extends Vec2Exception {}","import { Vec2 } from \"./vec2\";\nimport { Vec2ExceptionParallel } from \"./exceptions\";\nimport { Vec2Line } from \"./vec2Line\";\n\nexport class Vec2Math {\n    static diff(vec1: Vec2, vec2: Vec2): Vec2 {\n        return new Vec2(vec1.x - vec2.x, vec1.y - vec2.y);\n    }\n\n    static mul(vec1: Vec2, scalar: number): Vec2 {\n        return new Vec2(vec1.x * scalar, vec1.y * scalar);\n    }\n\n    /**\n     * Calculates distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length;\n    }\n\n    /**\n     * Calculates square of distance between 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static distance2(vec1: Vec2, vec2: Vec2): number {\n        return Vec2Math.diff(vec1, vec2).length2;\n    }\n\n    /**\n     * Finds intersection between 2 lines\n     * @param {Vec2Line} line1\n     * @param {Vec2Line} line2\n     * @returns {Vec2}\n     */\n    static intersect(line1, line2) {\n        if (line1.K === line2.K) {\n            throw new Vec2ExceptionParallel()\n        }\n\n        if (isNaN(line1.K) || isNaN(line2.K)) {\n            // One of two lines is vertical\n            if (isNaN(line1.K)) {\n                return line2.makeVec2FromX(line1._vec1.x);\n            } else {\n                return line1.makeVec2FromX(line2._vec1.x);\n            }\n        } else {\n            const x = (line1.B - line2.B) / (line2.K - line1.K);\n            return line1.makeVec2FromX(x);\n        }\n    }\n\n    /**\n     * Dot product of 2 vectors\n     * @param {Vec2} vec1\n     * @param {Vec2} vec2\n     * @returns {number}\n     */\n    static dot(vec1: Vec2, vec2: Vec2): number {\n        return vec1.x * vec2.x + vec1.y * vec2.y;\n    }\n\n    /**\n     *\n     * @param {Vec2} vec\n     * @param {Vec2Line} line\n     * @returns {Vec2}\n     */\n    static mirror(vec: Vec2, line: Vec2Line) {\n        const normal = line.direction.perpendicular;\n        return vec.diff(\n            normal.mul(2 * Vec2Math.dot(vec, normal))\n        );\n    }\n\n    static scale(vec1: Vec2, vec2: Vec2) {\n        return new Vec2(\n            vec1.x / vec2.x,\n            vec1.y / vec2.y\n        )\n    }\n}\n","export const MATH_ERROR = 0.000001;\nexport const MATH_ERROR2 = MATH_ERROR * MATH_ERROR;\nexport const SQRT2 = Math.sqrt(2);\n\n/**\n * Checks if a equals b with given error\n * @param {number} a\n * @param {number} b\n * @param {number} error\n * @returns {boolean}\n */\nexport function isEqual(a, b, error) {\n    return Math.abs(a - b) < error;\n}\n\nexport type NullableNumber = number | null;\n","import { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR2, NullableNumber } from \"./math\";\nimport { Vec2ExceptionNoPerpendicularVectorToZeroVector } from \"./exceptions\";\n\nexport class Vec2 {\n    private _x: number = 0;\n    private _y: number = 0;\n    private _length: NullableNumber = null;\n    private _length2: NullableNumber = null;\n\n    static lengthCallsCount = 0;\n    static length2CallsCount = 0;\n\n    constructor(x: number, y: number, l?: number) {\n        this._x = x;\n        this._y = y;\n\n        if (l) {\n            this._length = l;\n            this._length2 = l * l;\n        }\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set x(x: number) {\n        this._x = x;\n        this._length = null;\n    }\n\n    set y(y:number) {\n        this._y = y;\n        this._length = null;\n    }\n\n    get length(): number {\n        if (this._length === null) {\n            this._length = Math.sqrt(this.x*this.x + this.y*this.y);\n            Vec2.lengthCallsCount++;\n        }\n\n        return this._length;\n    }\n\n    /**\n     * Returns length^2\n     */\n    get length2(): number {\n        if (this._length2 === null) {\n            this._length2 = this._x*this._x + this._y*this._y;\n            Vec2.length2CallsCount++;\n        }\n\n        return this._length2;\n    }\n\n    /**\n     * Adds vec2 to current vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    addSelf(vec2: Vec2): Vec2 {\n        this._x += vec2.x;\n        this._y += vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Subtract from current vector given vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    subSelf(vec2: Vec2): Vec2 {\n        this._x -= vec2.x;\n        this._y -= vec2.y;\n        this._length = null;\n        return this;\n    }\n\n    /**\n     * Flips along X axis\n     * @returns {Vec2}\n     */\n    flipYSelf(): Vec2 {\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Flips along Y axis\n     * @returns {Vec2}\n     */\n    flipXSelf(): Vec2 {\n        this._x = -this._x;\n        return this;\n    }\n\n    flipSelf(): Vec2 {\n        this._x = -this._x;\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Checks if this vector equals given vector using global MATH_ERROR const\n     * @param vec2\n     */\n    equals(vec2) {\n        return Vec2Math.distance2(this, vec2) < MATH_ERROR2;\n    }\n\n    /**\n     * Sums current vector and given vector and returns new vector\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    sum(vec2: Vec2): Vec2 {\n        return new Vec2(this.x + vec2.x, this.y + vec2.y);\n    }\n\n    /**\n     * Calculate difference between current vector and given vector and returns\n     * new vector\n     *\n     * @param {Vec2} vec2\n     * @returns {Vec2}\n     */\n    diff(vec2: Vec2) {\n        return new Vec2(this.x - vec2.x, this.y - vec2.y);\n    }\n\n    /**\n     * Multiplicates vector by number\n     * @param {number} value\n     * @returns {Vec2}\n     */\n    mul(value: number) {\n        return new Vec2(this.x * value, this.y * value);\n    }\n\n    copy() {\n        return new Vec2(this.x, this.y);\n    }\n\n    applySelf(callback): Vec2 {\n        this.x = callback(this.x);\n        this.y = callback(this.y);\n        return this;\n    }\n\n    /**\n     * Returns normalized vector\n     * @returns {Vec2}\n     */\n    get ort() {\n        const l = this.length;\n        return new Vec2(this.x / l, this.y / l, 1);\n    }\n\n    get perpendicular() {\n        if (this.x === 0) {\n            // Vertical\n            if (this.y > 0) {\n                return Vec2.Horizontal().ort\n            } else if (this.y < 0) {\n                return Vec2.Horizontal().ort.flipSelf();\n            } else {\n                throw new Vec2ExceptionNoPerpendicularVectorToZeroVector();\n            }\n        } else if (this.y === 0) {\n            // Horizontal\n            if (this.x > 0) {\n                return Vec2.Vertical().ort\n            } else if (this.x < 0) {\n                return Vec2.Vertical().ort.flipSelf();\n            }\n        }\n\n        return new Vec2(\n            -this.y / this.x,\n            1\n        ).ort;\n    }\n\n    static Zero() {\n        return new Vec2(0, 0);\n    }\n\n    static Horizontal() {\n        return new Vec2(1, 0);\n    }\n\n    static Vertical() {\n        return new Vec2(0, 1);\n    }\n}\n\n\n\n\n\n\n\n\n","import {Vec2} from \"../vector/vec2\";\n\nexport class Item {\n    position = Vec2.Zero();\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    constructor(context, position) {\n        this.context = context;\n        this.position = position;\n    }\n\n    render() {\n\n    }\n}","import {Item} from \"./item\";\n\nexport class Circle extends Item {\n    r = 0;\n    color = '#00ff00';\n\n    constructor(context, position, r, color) {\n        super(context, position);\n\n        if (r) {\n            this.r = r;\n        }\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.beginPath()\n        this.context.arc(\n            this.position.x,\n            this.position.y,\n            this.r,\n            0,\n            2 * Math.PI\n        )\n\n        this.context.fillStyle = this.color;\n        this.context.fill();\n    }\n}","import { Vec2 } from \"./vec2\";\nimport { Vec2Math } from \"./vec2Math\";\nimport { MATH_ERROR, isEqual } from \"./math\";\n\nexport class Vec2Line {\n    private _vec1: Vec2 = Vec2.Zero();\n    private _vec2: Vec2 = Vec2.Zero();\n\n    private _direction: Vec2;\n    private _ort: Vec2;\n\n    private _length: number;\n    private _length2: number;\n\n    /**\n     * Y = K*X + B\n     * @type {number}\n     */\n    private _k: number = 0;\n    private _b: number = 0;\n\n    constructor(vec1, vec2) {\n        this._vec1 = vec1;\n        this._vec2 = vec2;\n\n        this._direction = Vec2Math.diff(this._vec1, this._vec2);\n        this._length = this._direction.length;\n        this._length2 = this._direction.length2;\n        this._ort = this._direction.ort;\n\n        this.calculateKB();\n    }\n\n    /**\n     * Determines if given point lays on the line\n     * @param vec\n     * @returns {boolean}\n     */\n    inBetween(vec) {\n        const l1 = Vec2Math.diff(vec, this._vec1).length;\n        const l2 = Vec2Math.diff(this._vec2, vec).length;\n        const sum = l1 + l2;\n\n\n\n        return isEqual(this._length, sum, MATH_ERROR);\n    }\n\n    calculateKB() {\n        if (this._vec1.y === this._vec2.y) {\n            // Horizontal line\n            this._b = this._vec1.y;\n            this._k = 0;\n        } else if (this._vec1.x === this._vec2.x) {\n            // Vertical line\n            this._b = NaN;\n            this._k = NaN;\n        } else {\n            this._b = (this._vec1.x * this._vec2.y - this._vec1.y * this._vec2.x) / (this._vec1.x - this._vec2.x)\n            this._k = (this._vec1.y - this._vec2.y) / (this._vec1.x - this._vec2.x);\n        }\n    }\n\n    makeVec2FromX(x) {\n        return new Vec2(x, this._k * x + this._b);\n    }\n\n    copy() {\n        return new Vec2Line(\n            this._vec1,\n            this._vec2\n        )\n    }\n\n    moveBy(vec) {\n        this._vec1.addSelf(vec);\n        this._vec2.addSelf(vec);\n        this.calculateKB();\n    }\n\n    getPointProjection(vec) {\n        const a = this.direction;\n        const b = Vec2Math.diff(vec, this._vec1);\n        const cosabD = Vec2Math.dot(a, b) / (this.length);\n\n        return this._vec1.sum(\n            this.ort.mul(cosabD)\n        );\n    }\n\n    get B() {\n        return this._b;\n    }\n\n    get K() {\n        return this._k;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    get ort() {\n        return this._ort;\n    }\n\n    get vec1() {\n        return this._vec1;\n    }\n\n    get vec2() {\n        return this._vec2;\n    }\n\n    static Vertical(x) {\n        return new Vec2Line(\n            new Vec2(x, 0),\n            new Vec2(x, Number.MAX_SAFE_INTEGER)\n        )\n    }\n\n    static Horizontal(y) {\n        return new Vec2Line(\n            new Vec2(0, y),\n            new Vec2(Number.MAX_SAFE_INTEGER, y)\n        )\n    }\n}","export enum SolverObjectTypes {\n    TypeNull = 0,\n    TypeBall = 1,\n    TypeImmovableBall = 2,\n    TypeImmovableLine = 3\n}\n","import {Vec2Math} from \"../vector/vec2Math\";\nimport {BallsObject} from \"./ball\";\nimport {SolverObjectTypes, TYPE_BALL, TYPE_IMMOVABLE_BALL, TYPE_IMMOVABLE_LINE} from \"./types\";\n\n/**\n * Collision between 2 balls objects\n * @param {BallsObject} obj1\n * @param {BallsObject} obj2\n */\nexport function collideBallAndBall(obj1, obj2) {\n    const between = Vec2Math.diff(obj1.currentPosition, obj2.currentPosition);\n    const distance = between.length;\n    const requiredDistance = obj1.radius + obj2.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        obj1.currentPosition.addSelf(Vec2Math.mul(normalized, obj1.radius / requiredDistance * delta * obj1.bounceValue));\n        obj2.currentPosition.subSelf(Vec2Math.mul(normalized, obj2.radius / requiredDistance * delta * obj2.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable ball\n * @param {BallsObject} ball\n * @param {ImmovableBallsObject} immovable\n */\nexport function collideBallAndImmovableBall(ball, immovable) {\n    const between = Vec2Math.diff(\n        ball.currentPosition,\n        immovable.currentPosition\n    );\n\n    const distance = between.length;\n    const requiredDistance = ball.radius + immovable.radius;\n\n    if (distance < requiredDistance) {\n        const normalized = between.ort;\n        const delta = requiredDistance - distance;\n        ball.currentPosition.addSelf(Vec2Math.mul(normalized, ball.radius / requiredDistance * delta * ball.bounceValue));\n    }\n}\n\n/**\n * Collision between ball and immovable line\n * @param {BallsObject} ball\n * @param {ImmovableLineObject} line\n */\nexport function collideBallAndImmovableLine(ball, line) {\n    try {\n        const projectionPoint = line._line.getPointProjection(ball.currentPosition);\n\n        if (line._line.inBetween(projectionPoint)) {\n            const between = Vec2Math.diff(\n                projectionPoint,\n                ball.currentPosition\n            )\n\n            if (between.length < ball.radius) {\n                const normalized = between.ort;\n\n                const delta = ball.radius - between.length;\n\n                ball.currentPosition.subSelf(\n                    Vec2Math.mul(normalized, delta * ball.bounceValue)\n                )\n            }\n        }\n    } catch (e) {\n    }\n}\n\nfunction flipObjects(obj1, obj2) {\n    return {\n        a: obj2,\n        b: obj1\n    }\n}\n\nexport function collide(a, b) {\n    let obj1 = a;\n    let obj2 = b;\n    if (obj1.type > obj2.type) {\n        const flipped = flipObjects(obj1, obj2);\n        obj1 = flipped.a;\n        obj2 = flipped.b\n    }\n\n    switch (true) {\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeBall:\n            return collideBallAndBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableBall:\n            return collideBallAndImmovableBall(obj1, obj2);\n        case obj1.type === SolverObjectTypes.TypeBall && obj2.type === SolverObjectTypes.TypeImmovableLine:\n            return collideBallAndImmovableLine(obj1, obj2);\n        default:\n            return;\n    }\n}","import {SolverObjectTypes} from \"./types\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class BaseSolverObject {\n    readonly type: SolverObjectTypes = SolverObjectTypes.TypeNull;\n    readonly index: number;\n    readonly immovable: boolean;\n\n    previousPosition = Vec2.Zero();\n    currentPosition = Vec2.Zero();\n\n    constructor() {\n        this.index = BaseSolverObject.index++;\n    }\n\n    update(step) {\n\n    }\n\n    accelerate(acc) {\n\n    }\n\n    collide(obj) {\n\n    }\n\n    addToGrid(collisionGrid) {\n\n    }\n\n    static index = 0;\n}\n","import { Vec2 } from \"../vector/vec2\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport { Vec2Math } from \"../vector/vec2Math\";\nimport {SolverObjectTypes} from \"./types\";\nimport { collide } from \"./collisionModels\";\nimport {BaseSolverObject} from \"./object\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class BallsObject extends BaseSolverObject {\n    acc = Vec2.Zero();\n\n    radius = 10;\n    bounceValue = 1.1;\n\n    type = SolverObjectTypes.TypeBall;\n    immovable = false;\n\n    /**\n     * Creates balls object\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super();\n        this.previousPosition = position.copy();\n        this.currentPosition = position.copy();\n        if (radius !== undefined) {\n            this.radius = radius\n        }\n    }\n\n    /**\n     * Updates state of object\n     * @param {number} step\n     */\n    update(step) {\n        const velocity = this.velocity;\n        this.previousPosition = this.currentPosition.copy();\n        this.currentPosition.addSelf(\n            velocity.addSelf(\n                this.acc.mul(step * step)\n            )\n        )\n        this.acc = Vec2.Zero();\n    }\n\n    accelerate(acc) {\n        this.acc.addSelf(acc);\n        return this;\n    }\n\n    setVelocity(vel) {\n        this.velocity = vel;\n        return this;\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    collide(obj) {\n        collide(this, obj)\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObject(\n            Math.floor(this.currentPosition.x),\n            Math.floor(this.currentPosition.y),\n            this\n        )\n    }\n\n    get velocity() {\n        return Vec2Math.diff(\n            this.currentPosition,\n            this.previousPosition\n        );\n    }\n\n    set velocity(v) {\n        this.previousPosition = Vec2Math.diff(this.currentPosition,v);\n    }\n\n    /**\n     *\n     * @returns {Vec2Line}\n     */\n    get movementVector() {\n        return new Vec2Line(this.previousPosition, this.currentPosition);\n    }\n}","export class Constrain {\n    constructor() {\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    applyConstrain(obj) {\n\n    }\n}","import { Constrain } from \"./constrain\";\n\nexport class ViewportConstrain extends Constrain {\n    _width = 0;\n    _height = 0;\n\n    constructor(width, height) {\n        super()\n        this.width = width;\n        this.height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    set width(width) {\n        this._width = width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set height(height) {\n        this._height = height;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        if (obj.currentPosition.x - obj.radius < 0) {\n            obj.currentPosition.x = obj.radius;\n        }\n\n        if (obj.currentPosition.x + obj.radius > this._width) {\n            obj.currentPosition.x = this._width - obj.radius;\n        }\n\n        if (obj.currentPosition.y - obj.radius < 0) {\n            obj.currentPosition.y = obj.radius;\n        }\n\n        if (obj.currentPosition.y + obj.radius > this._height) {\n            obj.currentPosition.y = this._height - obj.radius;\n        }\n    }\n}","import {Constrain} from \"./constrain\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class CircleConstrain extends Constrain {\n    /**\n     *\n     * @type {Vec2}\n     */\n    center = Vec2.Zero();\n\n    radius = 0;\n\n    constructor(center, radius) {\n        super();\n\n        this.center = center;\n        this.radius = radius;\n    }\n\n    applyConstrain(obj) {\n        super.applyConstrain(obj);\n\n        const toCenter = obj.currentPosition.diff(this.center);\n        const distance = toCenter.length;\n        const r = obj.radius;\n\n        if (distance > (this.radius - r)) {\n            const n = toCenter.ort;\n            obj.currentPosition = this.center.sum(\n                n.mul(this.radius - r)\n            );\n        }\n    }\n\n}","export class ObjectsGenerator {\n    solver = null;\n    constructor(solver) {\n        this.solver = solver;\n    }\n\n    // TODO Make me iterator\n    getNextObject(step) {\n        return null;\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\n\nexport class MappedObjectGeneratorItem {\n    /**\n     * Delay before object appear\n     * @type {number}\n     */\n    timeout;\n\n    /**\n     * Object configuration\n     * @type {BallsObject}\n     */\n    object;\n\n    constructor(timeout, object) {\n        this.timeout = timeout;\n        this.object = object;\n    }\n\n}\n\nexport class MappedObjectsGenerator extends ObjectsGenerator {\n    /**\n     * @param {MappedObjectGeneratorItem[]} map\n     */\n    constructor(solver, map) {\n        super(solver);\n\n        this.items = map;\n        this.currentTime = 0;\n    }\n\n    getNextObject(step) {\n        this.currentTime += step;\n\n        console.log(this.currentTime)\n\n        const index = this.items.findIndex((item) => item.timeout < this.currentTime);\n        if (index > -1) {\n            return this.items.splice(index, 1)[0].object;\n        }\n    }\n}","import {ObjectsGenerator} from \"./objectsGenerator\";\n\nexport class TotalObjectsGenerator extends ObjectsGenerator {\n    constructor(solver, count, delay, createCallback) {\n        super(solver);\n        this.limit = count;\n        this.total = 0;\n\n        this.delay = delay;\n        this.create = createCallback;\n        this.lastCreateTime = 0;\n    }\n\n    getNextObject(step) {\n        if (this.total > this.limit) {\n            return;\n        }\n\n        this.lastCreateTime += 1;\n        if (this.lastCreateTime > this.delay) {\n            const newItem = this.create(this.total);\n            this.lastCreateTime = 0;\n            this.total++;\n\n            return newItem;\n        }\n    }\n}","import { Vec2 } from \"./vector/vec2\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Vec2Math} from \"./vector/vec2Math\";\n\nexport class CollisionCell {\n    objects: BaseSolverObject[] = [];\n    hightlight: boolean = false;\n\n    addObject(obj) {\n        this.objects.push(obj);\n    }\n\n    clear() {\n        this.objects = [];\n        this.hightlight = false;\n    }\n\n    remove(index) {\n        const objectIndex = this.objects.findIndex(obj => obj.index === index);\n        if (objectIndex !== -1) {\n            this.objects.splice(objectIndex, 1);\n        }\n    }\n\n    get count() {\n        return this.objects.length;\n    }\n}\n\ntype CollisionGridForEachCallback = (x: number, y: number, cell: CollisionCell, index?: number) => void;\n\nexport class CollisionGrid {\n    cells: CollisionCell[] = [];\n    _width: number;\n    _height: number;\n    _size: number;\n    cellSize: Vec2;\n\n    constructor(width, height, cellSize: Vec2) {\n        this._width = width;\n        this._height = height;\n\n        this.cellSize = cellSize;\n\n        this.resize();\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    set width(w: number) {\n        this._width = w;\n        this.resize();\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    set height(h: number) {\n        this._height = h;\n        this.resize();\n    }\n\n    resize() {\n        this.cells = [];\n        this._size = this._width * this._height;\n        for (let i = 0; i < this._size; i++) {\n            this.cells.push(new CollisionCell());\n        }\n    }\n\n    addObject(worldX, worldY, obj) {\n        const x = Math.floor(worldX / this.cellSize.x);\n        const y = Math.floor(worldY / this.cellSize.y);\n\n        const index = x * this.width + y;\n        if (isNaN(index) || index >= this.size || index < 0) {\n\n        } else {\n            this.cells[index].addObject(obj);\n        }\n    }\n\n    makeIndexFromVec(vec) {\n        return vec.x * this.width + vec.y;\n    }\n\n    makeIndexFromCoord(x, y) {\n        return x * this.width + y;\n    }\n\n    /**\n     * Adds object to all cells between given coords\n     * @param worldLeftTop\n     * @param worldRightBottom\n     * @param obj\n     */\n    addObjectToCells(worldLeftTop: Vec2, worldRightBottom: Vec2, obj: BaseSolverObject) {\n        const point1 = Vec2Math.scale(worldLeftTop, this.cellSize).applySelf(Math.floor);\n        const point2 = Vec2Math.scale(worldRightBottom, this.cellSize).applySelf(Math.floor);\n\n        const index1 = this.makeIndexFromVec(point1);\n        const index2 = this.makeIndexFromVec(point2);\n\n        if (point1.x === point2.x) {\n            // Vertical\n            for (let cellIndex = index1; cellIndex < index2; cellIndex++) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else if (point1.y === point2.y) {\n            // Horizontal\n            for (let cellIndex = index1; cellIndex < index2; cellIndex+=this.height) {\n                this.cells[cellIndex].addObject(obj);\n            }\n        } else {\n            let left = Math.min(point1.x, point2.x);\n            let top = Math.min(point1.y, point2.y);\n            let right = Math.max(point1.x, point2.x);\n            let bottom = Math.max(point1.y, point2.y);\n            let height = bottom - top;\n            let startFrom = this.makeIndexFromCoord(left, top);\n\n            for (let x = 0; x <= right-left; x++) {\n                for (let y = 0; y <= height; y++) {\n                    const cellIndex= startFrom + x * this.height + y;\n                    this.cells[cellIndex].addObject(obj)\n                }\n            }\n        }\n    }\n\n    clear() {\n        for (let i = 0; i < this.size; i++) {\n            this.cells[i].clear();\n        }\n    }\n\n    forEach(callback: CollisionGridForEachCallback) {\n        this.cells.forEach((cell, index) => {\n            const x = Math.floor(index / this.width);\n            const y = index - x * this.width;\n            callback(x, y, cell, index);\n        })\n    }\n\n    hasCell(index, dt) {\n        if (index < 0 || index >= this.size) {\n            return false;\n        }\n\n        const x = Math.floor(index / this.width);\n        const y = index - x * this.width;\n\n        if (y <= 0 && dt < 0) {\n            // TOP CELL\n            return false;\n        }\n\n        if (y === this.height - 1 && dt > 0) {\n            // Bottom cell\n            return  false;\n        }\n\n        if (x === 0 && dt < 0) {\n            // left cell\n            return false;\n        }\n\n        if (x >= this.width - 1 && dt > 0) {\n            // right cell;\n            return false;\n        }\n\n        return true;\n    }\n}\n","import {Vec2} from \"./vector/vec2\";\nimport {BallsObject} from \"./objects/ball\";\nimport {BaseSolverObject} from \"./objects/object\";\nimport {Constrain} from \"./constrains/constrain\";\nimport {CollisionCell, CollisionGrid} from \"./grid\";\n\nexport class Solver {\n    objects: BaseSolverObject[] = []\n    constrains: Constrain = null;\n    gravity: Vec2 = Vec2.Zero();\n    subSteps: number = 4;\n    useFixedTime: boolean = true;\n    step: number;\n    collisionGrid: CollisionGrid;\n    worldSize: Vec2;\n\n    cellSize: Vec2;\n\n    constructor(worldSize) {\n        this.objects = [];\n        this.worldSize = worldSize.copy();\n\n        this.configure();\n    }\n\n    configure() {\n        this.gravity = new Vec2(0, 100);\n\n        this.useFixedTime = true;\n        this.step = 0.017 / this.subSteps;\n\n        const grids = 30;\n\n        this.cellSize = new Vec2(\n            this.worldSize.x / grids,\n            this.worldSize.y / grids\n        );\n\n        this.collisionGrid = new CollisionGrid(\n            grids, grids,\n            this.cellSize\n        )\n    }\n\n    /**\n     *\n     * @param {BallsObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n    }\n\n    /**\n     * Update the simulation by given step.\n     * @param {number} time amount of seconds passed since last update.\n     */\n    update(time) {\n        const subTime = this.useFixedTime ? this.step : time / this.subSteps;\n        for (let i = 0; i < this.subSteps; i++) {\n            this.addObjectsToGrid();\n            this.processCollisions();\n            this.applyGravity();\n            this.updateObjects(subTime);\n            this.applyConstrains();\n        }\n    }\n\n    addObjectsToGrid() {\n        this.collisionGrid.clear();\n        this.objects.forEach((obj, index) => {\n            obj.addToGrid(this.collisionGrid);\n        });\n    }\n\n    /**\n     * Update objects state\n     * @param {number} time amount of seconds passed since last update\n     */\n    updateObjects(time) {\n        this.objects.forEach(obj => obj.update(time))\n    }\n\n    applyGravity() {\n        this.objects.forEach(obj => obj.accelerate(this.gravity))\n    }\n\n    applyConstrains() {\n        this.objects.forEach(obj => this.constrains.applyConstrain(obj))\n    }\n\n    processCollisionsInCell(objA: BaseSolverObject, cell: CollisionCell) {\n        cell.objects.forEach(objB => {\n            if (objA === objB) {\n                return;\n            }\n\n            if (objA.immovable && objB.immovable) {\n                return;\n            }\n\n            objA.collide(objB);\n        })\n    }\n\n    processCell(index: number) {\n        this.collisionGrid.cells[index].objects.forEach(objA => {\n            this.processCollisionsInCell(objA, this.collisionGrid.cells[index]); // SELF\n\n            if (this.collisionGrid.hasCell(index, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - 1]); // TOP\n            }\n\n            if (this.collisionGrid.hasCell(index, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + 1]); // BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height - 1]); // RIGHT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height]); // RIGHT\n            }\n\n            if (this.collisionGrid.hasCell(index + this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index + this.collisionGrid.height + 1]); // RIGHT BOTTOM\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, -1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height - 1]); // LEFT TOP\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 0)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height]); // LEFT\n            }\n\n            if (this.collisionGrid.hasCell(index - this.collisionGrid.height, 1)) {\n                this.processCollisionsInCell(objA, this.collisionGrid.cells[index - this.collisionGrid.height + 1]); // LEFT BOTTOM\n            }\n        })\n    }\n\n    processCollisions() {\n        for (let index = 0; index < this.collisionGrid.size; index++) {\n            this.processCell(index);\n        }\n    }\n}\n\nfunction makeKey(obj1, obj2) {\n    return [obj1.index, obj2.index].sort().join('-');\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Rect extends Item {\n    size = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, size, color) {\n        super(context, position);\n\n        this.size = size;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(\n            this.position.x,\n            this.position.y,\n            this.position.x + this.size.x,\n            this.position.y + this.size.y\n        )\n    }\n}","export class RenderableObject {\n    /**\n     * @type {BallsObject}\n     */\n    ballsObject = null;\n\n    /**\n     * @type {Item}\n     */\n    renderItem = null;\n\n    constructor(ballsObject, renderItem) {\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        this.renderItem.position = this.ballsObject.currentPosition;\n    }\n\n    render() {\n        this.update();\n        this.renderItem.render();\n    }\n}","import {BallsObject} from \"./ball\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\nimport {SQRT2} from \"../vector/math\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class ImmovableBallsObject extends BallsObject {\n    type = SolverObjectTypes.TypeImmovableBall;\n    immovable = true;\n\n    /**\n     * @type {Vec2}\n     * @private\n     */\n    _fixedPosition = null;\n\n    /**\n     * @param {Vec2} position\n     * @param {number} [radius]\n     */\n    constructor(position, radius) {\n        super(position, radius);\n        this._fixedPosition = position.copy();\n    }\n\n    update(step) {\n        this.currentPosition = this._fixedPosition;\n        this.previousPosition = this._fixedPosition;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        const vec = new Vec2(\n            this.radius * SQRT2,\n            this.radius * SQRT2\n        )\n\n        const leftTop = this.currentPosition.sum(vec);\n        const rightBottom = this.currentPosition.diff(vec);\n\n        collisionGrid.addObjectToCells(\n            leftTop,\n            rightBottom,\n            this\n        );\n    }\n}","import {RenderableObject} from \"./object\";\n\nexport class ImmovableLineRenderableObject extends RenderableObject {\n    /**\n     * @type {ImmovableLineObject}\n     */\n    ballsObject = null;\n\n    constructor(ballsObject, renderItem) {\n        super(ballsObject);\n        this.ballsObject = ballsObject;\n        this.renderItem = renderItem;\n    }\n\n    update() {\n        super.update();\n        this.renderItem.direction = this.ballsObject._direction;\n    }\n}","import { BallsObject } from \"./ball\";\nimport { Vec2Line } from \"../vector/vec2Line\";\nimport {SolverObjectTypes} from \"./types\";\nimport {CollisionGrid} from \"../grid\";\n\nexport class ImmovableLineObject extends BallsObject {\n    _direction;\n    _line;\n\n    type = SolverObjectTypes.TypeImmovableLine;\n    immovable = true;\n\n    constructor(position, direction) {\n        super(position, 0);\n        this._direction = direction;\n\n        this._line = new Vec2Line(\n            this.currentPosition.copy(),\n            this.currentPosition.copy().sum(this._direction)\n        )\n    }\n\n    update(step) {\n        this.currentPosition = this._line._vec1;\n        this.previousPosition = this._line._vec2;\n    }\n\n    addToGrid(collisionGrid: CollisionGrid) {\n        collisionGrid.addObjectToCells(\n            this._line._vec1,\n            this._line._vec2,\n            this\n        );\n    }\n\n}","import {Item} from \"./item\";\nimport {Vec2} from \"../vector/vec2\";\n\nexport class Line extends Item {\n    direction = Vec2.Zero();\n    color = '#00ff00';\n\n    constructor(context, position, direction, color) {\n        super(context, position);\n\n        this.direction = direction;\n\n        if (color) {\n            this.color = color;\n        }\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.beginPath(); // Start a new path\n        this.context.moveTo(this.position.x, this.position.y);\n        this.context.lineTo(\n            this.position.x + this.direction.x,\n            this.position.y + this.direction.y\n        );\n        this.context.stroke(); // Render the path\n    }\n}","import {Circle} from \"./circle\";\n\nexport class CircleWithText extends Circle {\n    text = '';\n    textColor = '#ffffff';\n\n    constructor(context, position,r, color, text, textColor) {\n        super(context, position, r, color);\n        this.text = text;\n        if (textColor) {\n            this.textColor = textColor;\n        }\n    }\n\n    render() {\n        super.render();\n        this.context.fillStyle = this.textColor;\n        this.context.textBaseline = \"middle\";\n        this.context.textAlign = \"center\";\n        this.context.fillText(this.text, this.position.x, this.position.y);\n    }\n}","import {Rect} from \"./rect\";\n\nexport class Frame extends Rect {\n    constructor(context, position, size, color) {\n        super(context, position, size, color);\n    }\n\n    render() {\n        this.context.strokeStyle = this.color;\n        this.context.strokeRect(\n            this.position.x,\n            this.position.y,\n            this.size.x,\n            this.size.y\n        )\n    }\n}","import {Circle} from \"./items/circle\";\nimport {Vec2} from \"./vector/vec2\";\nimport {Vec2Math} from \"./vector/vec2Math\";\nimport {BallsObject} from \"./objects/ball\";\nimport {ViewportConstrain} from \"./constrains/viewport\";\nimport {CircleConstrain} from \"./constrains/circle\";\nimport {MappedObjectGeneratorItem, MappedObjectsGenerator} from \"./mappedObjectsGenerator\";\nimport {TotalObjectsGenerator} from \"./totalObjectsGenerator\";\nimport {Solver} from \"./solver\";\nimport {Rect} from \"./items/rect\";\nimport {RenderableObject} from \"./renderableObjects/object\";\nimport {ImmovableBallsObject} from \"./objects/immovableBall\";\nimport {ImmovableLineRenderableObject} from \"./renderableObjects/immovableLine\";\nimport {ImmovableLineObject} from \"./objects/immovableLine\";\nimport {Line} from \"./items/line\";\nimport {CircleWithText} from \"./items/circleWithText\";\nimport {Frame} from \"./items/frame\";\n\nconst balls = [\n    new MappedObjectGeneratorItem(\n        1,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        2,\n        new BallsObject(new Vec2(10, 10))\n    ),\n    new MappedObjectGeneratorItem(\n        3,\n        new BallsObject(new Vec2(10, 10))\n    ),\n]\n\nconst milkShakePoints = [\n    new Vec2(60, 110),\n    new Vec2(130, 490),\n    new Vec2(330, 490),\n    new Vec2(400, 110)\n]\n\nconst milkShakeLines = [\n    [milkShakePoints[0], Vec2Math.diff(milkShakePoints[0], milkShakePoints[1]).flipSelf()],\n    [milkShakePoints[1], Vec2Math.diff(milkShakePoints[1], milkShakePoints[2]).flipSelf()],\n    [milkShakePoints[2], Vec2Math.diff(milkShakePoints[2], milkShakePoints[3]).flipSelf()]\n]\n\nconst ballsColors = {\n    57: '#ffffff',\n    78: '#ffffff',\n    71: '#ffffff',\n    86: '#ffffff',\n    200: '#ffffff',\n    202: '#ffffff',\n    218: '#ffffff',\n}\n\nexport class Render {\n    /**\n     * List of balls\n     * @type {RenderableObject[]}\n     */\n    objects = []\n\n    /**\n     * @type {Constrain}\n     */\n    constrains = null;\n\n    /**\n     * Solver for physics\n     * @type {Solver}\n     */\n    solver = null;\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.context = this.canvas.getContext(\"2d\");\n\n        this.timeRenderStart = performance.now();\n        this.timeRenderEnd = performance.now();\n        this.step = 0;\n\n        /**\n         * @type {RenderableObject[]}\n         */\n        this.objects = [];\n\n        this.items = [];\n\n        this.generator = null;\n        this.solver = null;\n\n        this.configure();\n    }\n\n    configure() {\n        this.solver = new Solver(\n            new Vec2(\n                this.canvas.width,\n                this.canvas.height\n            )\n        );\n\n        this.context.font = '10px serif';\n\n        //this.switchToCircleConstrain();\n        this.switchToViewportConstrain();\n        this.solver.constrains = this.constrains;\n\n        const canvasCenter = new Vec2(\n            this.canvas.width / 2,\n            this.canvas.height / 2\n        );\n\n        const ballGeneratorPoint = new Vec2(\n            10, 10\n        );\n        const ballVelocity = new Vec2(\n            3, -3\n        ).mul(1/this.solver.subSteps);\n\n        this.generator = new TotalObjectsGenerator(\n            this.solver,\n            600,\n            7,\n            (index) => {\n                const obj = new RenderableObject(\n                    (new BallsObject(\n                        ballGeneratorPoint,\n                        5\n                    )).setVelocity(ballVelocity),\n                    new CircleWithText(\n                        this.context,\n                        Vec2.Zero(),\n                        5,\n                        ballsColors[index],\n                        '',\n                        '#000000'\n                    )\n                )\n\n                return obj;\n            }\n        );\n\n        this.addObject(new RenderableObject(\n            new ImmovableBallsObject(new Vec2(230, 50), 30),\n            new Circle(this.context, Vec2.Zero(), 30, '#ff0000')\n        ));\n\n        milkShakeLines.forEach(line => {\n            this.addObject(new ImmovableLineRenderableObject(\n                new ImmovableLineObject(\n                    line[0],\n                    line[1]\n                ),\n                new Line(\n                    this.context,\n                    Vec2.Zero(),\n                    Vec2.Zero(),\n                    '#ffffff'\n                )\n            ));\n        });\n    }\n\n    /**\n     * @param {RenderableObject} obj\n     */\n    addObject(obj) {\n        this.objects.push(obj);\n        this.solver.addObject(obj.ballsObject);\n    }\n\n    update(time) {\n        this.solver.update(time);\n    }\n\n    generatorsTick(time) {\n        const newBall = this.generator.getNextObject(time);\n        if (newBall) {\n            this.addObject(newBall)\n        }\n    }\n\n    tick() {\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.generatorsTick(this.step / 1000);\n        this.update(this.step / 1000);\n\n        this.clear();\n        this.renderItems();\n        this.renderGrid();\n\n        this.printFPS();\n\n        Vec2.lengthCallsCount = 0;\n    }\n\n    nextFrame = (time) => {\n        this.step = time - this.timeRenderEnd;\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = time;\n        self.requestAnimationFrame(this.nextFrame);\n    }\n\n    nextInterval = () => {\n        this.timeRenderStart = performance.now()\n        this.step = this.timeRenderStart - this.timeRenderEnd;\n\n        if (this.step < 0) {\n            this.step = 0;\n        }\n\n        this.tick();\n\n        this.timeRenderEnd = performance.now();\n    }\n\n    renderItems() {\n        this.items.forEach(item => item.render());\n        this.objects.forEach(obj => obj.render());\n    }\n\n    printText(text, x, y) {\n        this.context.fillStyle = \"#ffffff\";\n        this.context.textAlign = \"start\";\n        this.context.fillText(text, x, y);\n    }\n\n    printFPS() {\n        this.context.fillStyle = '#000000';\n        this.context.fillRect(0, 0, 100, 60);\n        this.printText(`${Math.round(this.step)} ms / ${Math.round(1000/this.step)} FPS`, 0, 10);\n        this.printText(`Length calls: ${Vec2.lengthCallsCount}`, 0 , 20);\n        this.printText(`Lenght2 calls: ${Vec2.length2CallsCount}`, 0 , 30);\n        this.printText(`Objects: ${this.objects.length}`, 0, 40);\n        this.printText(`Compares per object: ${Math.round(Vec2.lengthCallsCount / this.objects.length)}`, 0, 50);\n    }\n\n    clear() {\n        this.context.fillStyle = \"rgba(0, 0, 0, 0.9)\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    }\n\n    start() {\n        if (self.requestAnimationFrame) {\n            self.requestAnimationFrame(this.nextFrame);\n        } else {\n            setInterval(this.nextInterval, 16)\n        }\n    }\n\n    renderGrid() {\n        this.solver.collisionGrid.forEach((x, y, cell, index) => {\n            const cellPosition = new Vec2(\n                x * this.solver.cellSize.x,\n                y * this.solver.cellSize.y,\n            );\n            const rect = new Frame(\n                this.context,\n                cellPosition,\n                this.solver.cellSize.diff(new Vec2(5, 5)),\n                cell.count > 0 ? '#ff0000' : '#00ff00'\n            )\n\n            if (cell.hightlight) {\n                this.context.lineWidth = 10;\n            }\n\n            rect.render();\n\n            this.context.lineWidth = 1;\n            this.printText(index, cellPosition.x + this.solver.cellSize.x / 2, cellPosition.y + this.solver.cellSize.y / 2)\n        })\n    }\n\n    switchToCircleConstrain() {\n        this.constrains = new CircleConstrain(\n            new Vec2(this.canvas.width / 2, this.canvas.height / 2),\n            this.canvas.height / 2\n        )\n\n        this.items.push(\n            new Circle(\n                this.context,\n                this.canvas.width / 2,\n                this.canvas.height / 2,\n                this.canvas.height / 2,\n                '#000000'\n            )\n        );\n    }\n\n    switchToViewportConstrain() {\n        this.constrains = new ViewportConstrain(this.canvas.width, this.canvas.height)\n        // this.items.push(\n        //     new Rect(\n        //         this.context,\n        //         Vec2.Zero(),\n        //         new Vec2(\n        //             this.canvas.width,\n        //             this.canvas.height\n        //         ),\n        //         '#000000'\n        //     )\n        // );\n    }\n}","import { Render } from \"../render/index.js\";\n\nonmessage = function (event ) {\n    console.log(event);\n\n    const render = new Render(event.data.canvas);\n    render.start();\n}"],"names":["$455213ab5977fa62$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$34c4ac1087279ada$export$79992de41895b472","Error","$34c4ac1087279ada$export$98e05f023e6bbbeb","$34c4ac1087279ada$export$cc5bbfba1d12de75","$da092f9d35cbb202$export$92b0492af2e4b152","static","vec1","vec2","$23259477c7d45e0f$export$ac4bca90992eed1","x","y","scalar","diff","length","length2","line1","line2","K","isNaN","makeVec2FromX","_vec1","B","vec","line","normal","direction","perpendicular","mul","dot","$04ffb51222183417$export$9201df218db36553","$04ffb51222183417$export$3681641e15b6e2c3","Math","sqrt","this","_x","_y","_length","lengthCallsCount","_length2","length2CallsCount","addSelf","subSelf","flipYSelf","flipXSelf","flipSelf","equals","distance2","sum","copy","applySelf","callback","ort","l","Horizontal","Vertical","constructor","$4617e5f5b8d500e2$export$6d08773d2e66f8f2","render","context","position","Zero","$143ee38cf3bec427$export$c89a927ffc67e6fa","beginPath","arc","r","PI","fillStyle","color","fill","super","$342285373965c949$export$769818a274da100a","inBetween","_vec2","a","b","error","abs","calculateKB","_b","_k","NaN","moveBy","getPointProjection","cosabD","_direction","_ort","Number","MAX_SAFE_INTEGER","$0da903fdcff320eb$export$a59432db1b5f15cd","SolverObjectTypes","$93a740b8e1cfed7d$export$98e6d07575f46913","obj1","obj2","type","flipped","$93a740b8e1cfed7d$var$flipObjects","TypeBall","between","currentPosition","distance","requiredDistance","radius","normalized","delta","bounceValue","$93a740b8e1cfed7d$export$23e74c69ee7b6dae","TypeImmovableBall","ball","immovable","$93a740b8e1cfed7d$export$6d6f4258faab0992","TypeImmovableLine","projectionPoint","_line","e","$93a740b8e1cfed7d$export$4d790f09e0e06cd9","$854c4cc80086d7fa$export$8387ea1f2c3d2dbf","update","step","accelerate","acc","collide","addToGrid","collisionGrid","TypeNull","index","$fe689d312a788027$export$e4134913c977dac4","velocity","previousPosition","setVelocity","vel","addObject","floor","v","movementVector","undefined","$b152758d9af9f18b$export$504c072c1a75a697","applyConstrain","$e5deb4c997d86649$export$29fb847bec292dd0","width","_width","height","_height","$0cde6a08871d2110$export$4384cf344d141b50","toCenter","center","n","$f03645509a0a5725$export$780b62e628ec518f","getNextObject","solver","$057f5faed6298d51$export$cf86583e2e1a386b","timeout","object","$4e27416e632cb8f4$export$a16316d22a718d27","total","limit","lastCreateTime","delay","newItem","create","count","createCallback","$5e32aa21e4921f20$export$e172ac46f8971d96","objects","push","clear","hightlight","remove","objectIndex","findIndex","splice","$5e32aa21e4921f20$export$82d945040ef2d6e1","size","_size","w","resize","h","cells","i","worldX","worldY","cellSize","makeIndexFromVec","makeIndexFromCoord","addObjectToCells","worldLeftTop","worldRightBottom","point1","scale","point2","index1","index2","cellIndex","left","min","top","right","max","startFrom","forEach","cell","hasCell","dt","$1f664dd11ce9c2a3$export$cca492cadf45c096","configure","gravity","useFixedTime","subSteps","worldSize","time","subTime","addObjectsToGrid","processCollisions","applyGravity","updateObjects","applyConstrains","constrains","processCollisionsInCell","objA","objB","processCell","$2c1a4895804b6108$export$c79fc6492f3af13d","fillRect","$e0645bb325b1483a$export$c682e94218fd2425","renderItem","ballsObject","$a9095e88da856a7b$export$231acc6c5e36d927","_fixedPosition","leftTop","rightBottom","$dc60d3072d13f390$export$d17c9f1e24f0afb0","$b0a63751632cf09f$export$35284351ee95db01","$4a6bc97734791e07$export$17d680238e50603e","strokeStyle","moveTo","lineTo","stroke","$01802125d5e03a9c$export$d56a2681f508d897","textColor","textBaseline","textAlign","fillText","text","$7c30461bbbff0ab9$export$b89a827e9254211a","strokeRect","$9f255293c67779ce$var$milkShakePoints","$9f255293c67779ce$var$milkShakeLines","$9f255293c67779ce$var$ballsColors","$9f255293c67779ce$export$160ae30d75f98247","canvas","font","switchToViewportConstrain","ballGeneratorPoint","ballVelocity","generator","generatorsTick","newBall","tick","renderItems","renderGrid","printFPS","items","item","printText","round","start","self","requestAnimationFrame","nextFrame","setInterval","nextInterval","cellPosition","rect","lineWidth","switchToCircleConstrain","timeRenderEnd","timeRenderStart","performance","now","getContext","onmessage","event","console","log","data"],"version":3,"file":"main.e7ad44ea.js.map"}